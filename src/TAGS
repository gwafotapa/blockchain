
network.rs,796
pub struct Network {Network16,356
impl Network {Network22,494
    pub fn with_capacity(n: usize) -> Network {with_capacity23,509
    pub fn add(&mut self, node: Node) {add31,719
    pub fn random(nodes: usize) -> Network {random36,853
    pub fn run(&mut self) {run59,1691
    pub fn broadcast(&self, message: Message) {broadcast69,1949
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut76,2157
fn random_graph(vertices: usize) -> Graph {random_graph81,2270
// impl Drop for Network {Network120,3452
//     fn drop(&mut self) {drop121,3479
impl fmt::Debug for Network {Network139,4112
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt140,4142
mod test {test151,4485
    fn test_random_graph() {test_random_graph155,4527

node.rs,1595
pub struct Node {Node13,284
impl PartialEq for Node {Node25,607
    fn eq(&self, other: &Node) -> bool {eq26,633
impl Eq for Node {}Node31,711
impl Hash for Node {Node33,732
    fn hash<H: Hasher>(&self, state: &mut H) {hash34,753
impl Node {Node39,838
    pub fn new(new40,850
    pub fn run(&mut self) {run61,1435
    pub fn id(&self) -> usize {id118,4075
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender122,4130
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener126,4210
    pub fn neighbours(&self) -> &[(usize, Sender<Arc<Vec<u8>>>)] {neighbours130,4296
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool134,4403
    pub fn utxo_pool_mut(&mut self) -> &mut UtxoPool {utxo_pool_mut138,4477
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool142,4567
    pub fn transaction_pool_mut(&mut self) -> &mut TransactionPool {transaction_pool_mut146,4662
    pub fn wallet(&self) -> &Wallet {wallet150,4773
    pub fn wallet_mut(&mut self) -> &mut Wallet {wallet_mut154,4839
    pub fn propagate(&self, message: Message) {propagate158,4921
    // pub fn blockchain(&self) -> &Blockchain {blockchain165,5146
    // pub fn update_transaction_pool(&mut self) -> Option<&[Transaction]> {update_transaction_pool170,5275
    //     // pub fn update_transaction_pool(&mut self) -> Option<Vec<u8>> {update_transaction_pool171,5352
    // pub fn propagate<B>(&self, bytes: B)propagate192,6222
    // pub fn mine(&mut self) -> Option<Block> {mine202,6481
    // pub fn synchronize(&mut self) {synchronize222,7356

wallet.rs,395
pub struct Wallet {Wallet8,194
impl Wallet {Wallet13,254
    pub fn new(id: usize, utxos: Vec<Utxo>) -> Self {new14,268
    pub fn add(&mut self, utxo: Utxo) {add18,356
    pub fn remove(&mut self, input: &TransactionInput) {remove25,519
    pub fn initiate(&mut self) -> Option<Transaction> {initiate32,731
    pub fn process(&mut self, transaction: &Transaction) {process79,2606

main.rs,24
fn main() {main13,281

chain.rs,563
pub struct Blockchain {Blockchain3,54
impl Blockchain {Blockchain8,136
    pub fn new() -> Self {new9,154
    pub fn push(&mut self, block: Block) {push16,287
    pub fn len(&self) -> usize {len21,402
    pub fn last(&self) -> &Block {last25,467
    pub fn mined_block(&self) -> Option<&Block> {mined_block29,544
    pub fn has_mined_block(&self) -> bool {has_mined_block33,635
    pub fn take_mined_block(&mut self) -> Block {take_mined_block37,721
    pub fn set_mined_block(&mut self, transactions: Vec<Transaction>) {set_mined_block41,819

common.rs,794
pub const NODES: usize = 4;NODES9,178
pub const PROBABILITY_SPEND: f64 = 1.0 / 1000000.0;PROBABILITY_SPEND10,206
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN11,258
pub const INPUT_SIZE_BYTES: usize = 32 + 8;INPUT_SIZE_BYTES12,297
pub const OUTPUT_SIZE_BYTES: usize = 4 + 8;OUTPUT_SIZE_BYTES13,341
pub const INIT_UTXO_AMOUNT: u32 = 10;INIT_UTXO_AMOUNT16,414
pub const INIT_UTXO_HASH: [u8; 32] = [0u8; 32];INIT_UTXO_HASH17,452
pub enum Message<'a> {Message19,501
impl<'a, T> From<T> for Message<'a>Message25,601
    fn from(bytes: T) -> Self {from29,665
impl<'a> Message<'a> {Message41,994
    pub fn serialize(&self) -> Vec<u8> {serialize42,1017
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize49,1223
    // pub fn from<T>(bytes: T) -> Vec<Self>from55,1339

transaction/pool.rs,1058
pub struct TransactionPool {TransactionPool10,182
impl TransactionPool {TransactionPool14,250
    pub fn new() -> Self {new15,273
    // pub fn update(&mut self, utxo_pool: &UtxoPool) -> Option<Vec<u8>> {update21,370
    pub fn size(&self) -> usize {size39,1040
    pub fn add(&mut self, transaction: Transaction) {add43,1113
    pub fn remove(&mut self, transaction: &Transaction) -> Option<Transaction> {remove47,1219
    pub fn contains(&self, transaction: &Transaction) -> bool {contains52,1392
    pub fn position(&self, transaction: &Transaction) -> Option<usize> {position56,1511
    pub fn transactions(&self) -> &[Transaction] {transactions60,1657
    // pub fn utxo(&self, input: TransactionInput) -> Option<Utxo> {utxo64,1742
impl Eq for TransactionPool {}TransactionPool69,1851
impl PartialEq for TransactionPool {TransactionPool71,1883
    fn eq(&self, other: &Self) -> bool {eq72,1920
impl Index<usize> for TransactionPool {TransactionPool79,2203
    fn index(&self, index: usize) -> &Self::Output {index82,2275

transaction/error.rs,324
pub struct InvalidTransaction;InvalidTransaction5,62
impl fmt::Display for InvalidTransaction {InvalidTransaction7,94
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt8,137
impl Error for InvalidTransaction {InvalidTransaction13,246
    fn source(&self) -> Option<&(dyn Error + 'static)> {source14,282

transaction/mod.rs,1184
pub struct Transaction {Transaction17,450
impl Transaction {Transaction23,564
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new24,583
    pub fn serialize(&self) -> Vec<u8> {serialize40,1049
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize49,1417
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root56,1543
    pub fn id(&self) -> Hash {id62,1785
    pub fn inputs(&self) -> &[TransactionInput] {inputs66,1839
    pub fn outputs(&self) -> &[TransactionOutput] {outputs70,1917
impl From<&[u8]> for Transaction {Transaction75,2000
    fn from(bytes: &[u8]) -> Self {from76,2035
impl PartialEq for Transaction {Transaction95,2723
    fn eq(&self, other: &Self) -> bool {eq96,2756
impl fmt::Display for Transaction {Transaction101,2834
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt102,2870
impl HashTrait for Transaction {Transaction113,3130
    fn hash<H: Hasher>(&self, state: &mut H) {hash114,3163
pub mod error;error119,3248
pub mod input;input120,3263
pub mod merkle_tree;merkle_tree121,3278
pub mod output;output122,3299
pub mod pool;pool123,3315

transaction/output.rs,502
pub struct TransactionOutput {TransactionOutput6,118
impl TransactionOutput {TransactionOutput11,188
    pub fn new(amount: u32, puzzle: usize) -> Self {new12,213
    pub fn serialize(&self) -> Vec<u8> {serialize16,305
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize23,530
    pub fn amount(&self) -> u32 {amount30,656
    pub fn puzzle(&self) -> usize {puzzle34,717
impl From<&[u8]> for TransactionOutput {TransactionOutput39,782
    fn from(bytes: &[u8]) -> Self {from40,823

transaction/input.rs,571
pub struct TransactionInput {TransactionInput6,125
impl TransactionInput {TransactionInput11,191
    pub fn new(txid: Hash, vout: usize) -> Self {new12,215
    pub fn serialize(&self) -> Vec<u8> {serialize16,300
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize23,516
    pub fn txid(&self) -> Hash {txid30,642
    pub fn vout(&self) -> usize {vout34,700
    // pub fn utxo(&self, tx_pool: &TransactionPool) -> Option<Utxo> {utxo38,759
impl From<&[u8]> for TransactionInput {TransactionInput47,1050
    fn from(bytes: &[u8]) -> Self {from48,1090

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,91
impl Merge for MergeHash {MergeHash8,116
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,166

lib.rs,235
// pub mod block;block3,33
// pub mod chain;chain4,51
pub mod common;common5,69
pub mod network;network6,85
pub mod node;node7,102
pub mod transaction;transaction8,116
pub mod utxo;utxo9,137
pub mod wallet;wallet10,151

utxo/pool.rs,994
pub struct UtxoPool {UtxoPool9,249
impl UtxoPool {UtxoPool13,330
    pub fn new(nodes: usize) -> Self {new14,346
    pub fn add(&mut self, utxo: Utxo) {add28,740
    pub fn remove(&mut self, utxo: &Utxo) -> bool {remove33,908
    // pub fn contains(&self, utxo: &Utxo) -> bool {contains41,1203
    pub fn contains(&self, utxo: &Utxo) -> bool {contains45,1314
    // pub fn random(&self) -> Utxo {random49,1416
    pub fn node(&self, node: usize) -> Vec<Utxo> {node57,1722
    pub fn process(&mut self, transaction: &Transaction) -> result::Result<(), InvalidTransaction> {process65,1936
impl Eq for UtxoPool {}UtxoPool102,3265
impl PartialEq for UtxoPool {UtxoPool104,3290
    fn eq(&self, other: &Self) -> bool {eq105,3320
impl fmt::Display for UtxoPool {UtxoPool114,3659
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt115,3692
impl fmt::Debug for UtxoPool {UtxoPool123,3902
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt124,3933

utxo/mod.rs,943
pub struct Utxo {Utxo10,283
// impl PartialEq for Utxo {Utxo15,364
//     fn eq(&self, other: &Self) -> bool {eq16,393
// impl From<&[u8]> for Utxo {Utxo21,491
//     fn from(bytes: &[u8]) -> Self {from22,522
impl Utxo {Utxo29,768
    // pub fn new(txid: Hash, vout: usize, amount: u32, puzzle: usize) -> Self {new30,780
    pub fn new(input: TransactionInput, output: TransactionOutput) -> Self {new39,990
    pub fn input(&self) -> &TransactionInput {input43,1105
    pub fn output(&self) -> &TransactionOutput {output47,1179
    pub fn txid(&self) -> Hash {txid51,1256
    pub fn vout(&self) -> usize {vout55,1322
    pub fn amount(&self) -> u32 {amount59,1389
    pub fn puzzle(&self) -> usize {puzzle63,1459
    // pub fn serialize(&self) -> Vec<u8> {serialize67,1531
impl fmt::Display for Utxo {Utxo77,1770
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt78,1799
pub mod pool;pool93,2116

block.rs,796
const GENESIS_BLOCK_HASH_PREV_BLOCK: &[u8; 32] =GENESIS_BLOCK_HASH_PREV_BLOCK8,163
const GENESIS_BLOCK_HASH_MERKLE_ROOT: &[u8; 32] =GENESIS_BLOCK_HASH_MERKLE_ROOT10,291
pub struct Block {Block13,421
pub struct BlockHeader {BlockHeader19,523
impl Block {Block25,625
    pub fn genesis() -> Self {genesis26,638
    pub fn new(height: usize, hash_prev_block: Hash, transactions: Vec<Transaction>) -> Self {new37,979
    pub fn height(&self) -> usize {height52,1449
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block56,1512
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root60,1599
    pub fn transactions(&self) -> &Vec<Transaction> {transactions64,1688
    pub fn hash(&self) -> Hash {hash68,1776
    pub fn serialize(&self) -> Vec<u8> {serialize75,1962
