
utxo_pool/error.rs,440
pub enum UtxoPoolError {UtxoPoolError5,48
impl fmt::Display for UtxoPoolError {UtxoPoolError15,282
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt16,320
impl error::Error for UtxoPoolError {UtxoPoolError43,1376
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source44,1414
impl From<secp256k1::Error> for UtxoPoolError {UtxoPoolError57,1873
    fn from(err: secp256k1::Error) -> Self {from58,1921

utxo_pool/mod.rs,1757
pub struct UtxoPool {UtxoPool15,422
impl UtxoPool {UtxoPool20,531
    pub fn new(keys: Vec<PublicKey>) -> Self {new21,547
    pub fn add(&mut self, utxo: Utxo) -> Result<(), UtxoPoolError> {add39,1042
    pub fn remove(&mut self, utxo: &Utxo) -> Result<UtxoData, UtxoPoolError> {remove46,1270
    pub fn contains(&self, utxo: Utxo) -> bool {contains52,1453
    pub fn owned_by(&self, pk: &PublicKey) -> HashSet<Utxo> {owned_by56,1552
    pub fn process_t(&mut self, transaction: &Transaction) {process_t64,1809
    pub fn process(&mut self, block: &Block) {process76,2299
    pub fn process_all(&mut self, blocks: &[Block]) {process_all82,2454
    pub fn undo_t(&mut self, transaction: &Transaction, blockchain: &Blockchain, block: &Block) {undo_t88,2588
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain) {undo109,3514
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain) {undo_all115,3707
    pub fn verify(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {verify121,3885
    pub fn authenticate(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {authenticate129,4253
    pub fn validate(&self, block: &Block) -> Result<(), UtxoPoolError> {validate152,5155
    pub fn size(&self) -> usize {size173,5913
    pub fn initial_utxos(&self) -> &HashMap<UtxoId, UtxoData> {initial_utxos177,5979
    pub fn utxos(&self) -> &HashMap<UtxoId, UtxoData> {utxos181,6078
impl Eq for UtxoPool {}UtxoPool186,6163
impl PartialEq for UtxoPool {UtxoPool188,6188
    fn eq(&self, other: &Self) -> bool {eq189,6218
impl fmt::Display for UtxoPool {UtxoPool196,6503
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt197,6536
pub mod error;error213,7013

node/mod.rs,1295
pub struct Node {Node20,531
impl Node {Node35,887
    pub fn new(new36,899
    pub fn run(&mut self) {run69,1809
    pub fn process_t(&mut self, transaction: Transaction) {process_t106,3349
    pub fn process_b(&mut self, block: Block) {process_b120,3889
    pub fn propagate(&self, message: Message) {propagate153,5611
    pub fn shut_down(&mut self) {shut_down160,5843
    pub fn id(&self) -> usize {id186,6849
    pub fn public_key(&self) -> &PublicKey {public_key190,6904
    pub fn secret_key(&self) -> &SecretKey {secret_key194,6981
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender198,7058
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener202,7138
    pub fn neighbours(&self) -> &Vec<Neighbour> {neighbours206,7224
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool210,7306
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool214,7380
    pub fn wallet(&self) -> &Wallet {wallet218,7475
    pub fn blockchain(&self) -> &Blockchain {blockchain222,7541
impl Eq for Node {}Node227,7621
impl PartialEq for Node {Node229,7642
    fn eq(&self, other: &Node) -> bool {eq230,7668
impl Hash for Node {Node235,7762
    fn hash<H: Hasher>(&self, state: &mut H) {hash236,7783
pub mod message;message241,7876

node/message.rs,346
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN6,86
pub enum Message<'a> {Message9,151
impl<'a, B> From<B> for Message<'a>Message15,257
    fn from(bytes: B) -> Self {from19,321
impl<'a> Message<'a> {Message32,739
    pub fn serialize(&self) -> Vec<u8> {serialize33,762
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize41,1024

blockchain/error.rs,322
pub enum BlockchainError {BlockchainError5,48
impl fmt::Display for BlockchainError {BlockchainError10,111
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt11,151
impl error::Error for BlockchainError {BlockchainError25,587
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source26,627

blockchain/mod.rs,1400
pub struct Blockchain {Blockchain12,268
impl Blockchain {Blockchain17,358
    pub fn new() -> Self {new18,376
    pub fn push(&mut self, block: Block) -> Result<(), BlockchainError> {push26,603
    pub fn block_delta(&self, block1: &Block, block2: &Block) -> (Vec<Block>, Vec<Block>) {block_delta45,1412
    fn range_of_blocks<'a>(&'a self, mut child: &'a Block, parent: &'a Block) -> Vec<Block> {range_of_blocks52,1716
    pub fn contains(&self, block: &Block) -> bool {contains61,2022
    pub fn contains_t(&self, transaction: &Transaction) -> bool {contains_t65,2128
    pub fn parent(&self, block: &Block) -> Option<&Block> {parent78,2479
    pub fn common_parent<'a>(common_parent82,2594
    pub fn get_utxo<'a>(&'a self, utxo_id: &UtxoId, mut block: &'a Block) -> Utxo {get_utxo108,3456
    pub fn top(&self) -> &Block {top117,3722
    pub fn height(&self) -> usize {height121,3799
    pub fn len(&self) -> usize {len125,3870
    pub fn chain(&self) -> &HashMap<BlockHash, Block> {chain129,3936
    pub fn top_hash(&self) -> &BlockHash {top_hash133,4019
impl fmt::Display for Blockchain {Blockchain138,4094
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt139,4129
impl Eq for Blockchain {}Blockchain161,4752
impl PartialEq for Blockchain {Blockchain163,4779
    fn eq(&self, other: &Self) -> bool {eq164,4811
pub mod error;error174,5156

network/neighbour.rs,343
pub struct Neighbour {Neighbour5,76
impl Neighbour {Neighbour11,178
    pub fn new(id: usize, public_key: PublicKey, sender: Sender<Arc<Vec<u8>>>) -> Self {new12,195
    pub fn id(&self) -> usize {id20,376
    pub fn public_key(&self) -> &PublicKey {public_key24,431
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender28,508

network/synchronizer.rs,295
pub struct Synchronizer {Synchronizer3,39
impl Synchronizer {Synchronizer8,129
    pub fn new(barrier: Arc<Barrier>, state: Arc<Mutex<Vec<bool>>>) -> Self {new9,149
    pub fn barrier(&self) -> &Arc<Barrier> {barrier13,266
    pub fn state(&self) -> Arc<Mutex<Vec<bool>>> {state17,340

network/mod.rs,876
pub struct Network {Network21,563
impl Network {Network27,701
    pub fn with_capacity(n: usize) -> Self {with_capacity28,716
    pub fn add(&mut self, node: Node) {add36,923
    pub fn random(nodes: usize) -> Self {random41,1057
    pub fn run(&mut self) {run94,3041
    pub fn broadcast(&self, message: Message) {broadcast109,3483
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut116,3691
fn random_graph(vertices: usize) -> Graph {random_graph121,3804
// impl Drop for Network {Network157,4924
//     fn drop(&mut self) {drop158,4951
impl fmt::Debug for Network {Network176,5584
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt177,5614
pub mod neighbour;neighbour194,6087
pub mod synchronizer;synchronizer195,6106
mod test {test198,6142
    fn test_random_graph() {test_random_graph202,6184

constants.rs,866
pub const GENESIS_BLOCK_HASH_PREV_BLOCK: [u8; 32] = [0u8; 32];GENESIS_BLOCK_HASH_PREV_BLOCK1,0
pub const HEADER_BYTES: usize = 64;HEADER_BYTES2,63
pub const MINE_NEW_BLOCK_PROBA: f64 = 1.0 / 1.0;MINE_NEW_BLOCK_PROBA3,99
pub const NODES: usize = 4;NODES4,148
pub const SIGNATURE_BYTES: usize = 64;SIGNATURE_BYTES5,176
pub const SPEND_PROBA: f64 = 1.0 / 1000.0;SPEND_PROBA6,215
pub const TX_INPUT_BYTES: usize = UTXO_ID_BYTES + SIGNATURE_BYTES;TX_INPUT_BYTES7,258
pub const TX_OUTPUT_BYTES: usize = UTXO_DATA_BYTES;TX_OUTPUT_BYTES8,325
pub const TXS_PER_BLOCK: usize = 2;TXS_PER_BLOCK9,377
pub const UTXO_AMOUNT_INIT: u32 = 10;UTXO_AMOUNT_INIT10,413
pub const UTXO_DATA_BYTES: usize = 4 + 33;UTXO_DATA_BYTES11,451
pub const UTXO_HASH_INIT: [u8; 32] = [0u8; 32];UTXO_HASH_INIT12,494
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES13,542

wallet/error.rs,298
pub enum WalletError {WalletError5,48
impl fmt::Display for WalletError {WalletError11,126
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,162
impl error::Error for WalletError {WalletError30,735
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source31,771

wallet/mod.rs,1180
pub struct Wallet {Wallet17,508
impl Wallet {Wallet24,643
    pub fn new(new25,657
    pub fn add(&mut self, utxo: Utxo) -> Result<(), WalletError> {add39,940
    pub fn remove(&mut self, utxo: &Utxo) -> Result<(), WalletError> {remove51,1281
    pub fn remove_if_utxo_from(&mut self, input: &TransactionInput) -> bool {remove_if_utxo_from59,1484
    pub fn initiate(&mut self) -> Option<Transaction> {initiate73,1834
    pub fn process_t(&mut self, transaction: &Transaction) {process_t118,3705
    pub fn process(&mut self, block: &Block) {process134,4263
    pub fn process_all(&mut self, blocks: &[Block]) {process_all140,4418
    pub fn undo_t(undo_t146,4552
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo180,5777
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo_all186,5996
    pub fn public_key(&self) -> &PublicKey {public_key192,6207
    pub fn utxos(&self) -> &HashSet<Utxo> {utxos196,6284
impl fmt::Display for Wallet {Wallet201,6357
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt202,6388
pub mod error;error218,6835

main.rs,24
fn main() {main17,346

transaction/mod.rs,1135
pub struct Transaction {Transaction16,378
impl Transaction {Transaction22,492
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new23,511
    pub fn serialize(&self) -> Vec<u8> {serialize39,976
    pub fn deserialize<B>(bytes: B) -> (Self, usize)deserialize49,1407
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root75,2316
    pub fn bytes(&self) -> usize {bytes81,2558
    pub fn id(&self) -> &Hash {id85,2694
    pub fn inputs(&self) -> &Vec<TransactionInput> {inputs89,2750
    pub fn outputs(&self) -> &Vec<TransactionOutput> {outputs93,2831
impl Eq for Transaction {}Transaction98,2917
impl PartialEq for Transaction {Transaction100,2945
    fn eq(&self, other: &Self) -> bool {eq101,2978
impl fmt::Display for Transaction {Transaction106,3056
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt107,3092
impl HashTrait for Transaction {Transaction131,3765
    fn hash<H: Hasher>(&self, state: &mut H) {hash132,3798
pub mod input;input137,3883
pub mod merkle_tree;merkle_tree138,3898
pub mod output;output139,3919

transaction/output.rs,737
pub struct TransactionOutput(UtxoData);TransactionOutput7,99
impl TransactionOutput {TransactionOutput9,140
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new10,165
    pub fn serialize(&self) -> Vec<u8> {serialize14,281
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize18,356
    pub fn utxo_data(&self) -> &UtxoData {utxo_data25,490
    pub fn amount(&self) -> u32 {amount29,556
    pub fn public_key(&self) -> &PublicKey {public_key33,621
impl From<UtxoData> for TransactionOutput {TransactionOutput38,704
    fn from(utxo_data: UtxoData) -> Self {from39,748
impl fmt::Display for TransactionOutput {TransactionOutput44,824
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt45,866

transaction/input.rs,729
pub struct TransactionInput {TransactionInput9,178
impl TransactionInput {TransactionInput14,252
    pub fn new(utxo_id: UtxoId, sig: Signature) -> Self {new15,276
    pub fn serialize(&self) -> Vec<u8> {serialize19,371
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,600
    pub fn utxo_id(&self) -> &UtxoId {utxo_id33,717
    pub fn sig(&self) -> &Signature {sig37,785
    pub fn txid(&self) -> &Hash {txid41,848
    pub fn vout(&self) -> usize {vout45,917
impl<B> From<B> for TransactionInputTransactionInput50,988
    fn from(bytes: B) -> Self {from54,1053
impl fmt::Display for TransactionInput {TransactionInput62,1287
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt63,1328

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,83
impl Merge for MergeHash {MergeHash8,108
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,158

block/error.rs,291
pub enum BlockError {BlockError5,48
impl fmt::Display for BlockError {BlockError9,100
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt10,135
impl error::Error for BlockError {BlockError19,372
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source20,407

block/mod.rs,1377
pub struct Block {Block15,331
impl Block {Block21,433
    pub fn genesis() -> Self {genesis22,446
    pub fn new(parent: &Block, transactions: Vec<Transaction>) -> Result<Self, BlockError> {new35,780
    pub fn get_utxo(&self, utxo_id: &UtxoId) -> Option<Utxo> {get_utxo48,1256
    pub fn hash(&self) -> Hash {hash59,1635
    pub fn serialize(&self) -> Vec<u8> {serialize67,1856
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize76,2207
    pub fn contains(&self, transaction: &Transaction) -> bool {contains83,2324
    pub fn is_genesis(&self) -> bool {is_genesis87,2445
    pub fn transaction_count(&self) -> usize {transaction_count91,2516
    pub fn id(&self) -> Hash {id95,2602
    pub fn height(&self) -> usize {height99,2660
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block103,2723
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root107,2813
    pub fn transactions(&self) -> &Vec<Transaction> {transactions111,2905
impl Eq for Block {}Block116,2995
impl PartialEq for Block {Block118,3017
    fn eq(&self, other: &Self) -> bool {eq119,3044
impl<B> From<B> for BlockBlock124,3130
    fn from(bytes: B) -> Self {from128,3184
impl fmt::Display for Block {Block151,3943
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt152,3973
pub mod error;error167,4407
pub mod header;header168,4422

block/header.rs,517
pub struct BlockHeader {BlockHeader4,42
impl BlockHeader {BlockHeader10,144
    pub fn new(hash_prev_block: Hash, hash_merkle_root: Hash) -> Self {new11,163
    pub fn serialize(&self) -> Vec<u8> {serialize18,326
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,505
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block32,622
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root36,704
impl<B> From<B> for BlockHeaderBlockHeader41,790
    fn from(bytes: B) -> Self {from45,850

error.rs,802
pub enum Error {Error11,274
impl fmt::Display for Error {Error19,472
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt20,502
impl error::Error for Error {Error31,865
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source32,895
impl From<BlockError> for Error {Error43,1273
    fn from(err: BlockError) -> Self {from44,1307
impl From<BlockchainError> for Error {Error49,1385
    fn from(err: BlockchainError) -> Self {from50,1424
impl From<TransactionPoolError> for Error {Error55,1512
    fn from(err: TransactionPoolError) -> Self {from56,1556
impl From<UtxoPoolError> for Error {Error61,1654
    fn from(err: UtxoPoolError) -> Self {from62,1691
impl From<WalletError> for Error {Error67,1775
    fn from(err: WalletError) -> Self {from68,1810

transaction_pool/error.rs,352
pub enum TransactionPoolError {TransactionPoolError7,83
impl fmt::Display for TransactionPoolError {TransactionPoolError13,196
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt14,241
impl error::Error for TransactionPoolError {TransactionPoolError33,865
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source34,910

transaction_pool/mod.rs,1245
pub struct TransactionPool {TransactionPool11,233
impl TransactionPool {TransactionPool15,305
    pub fn new() -> Self {new16,328
    pub fn size(&self) -> usize {size22,429
    pub fn add(&mut self, transaction: Transaction) -> Result<(), TransactionPoolError> {add26,502
    pub fn remove(&mut self, transaction: &Transaction) -> Result<(), TransactionPoolError> {remove34,752
    pub fn verify(&self, transaction: &Transaction) -> Result<(), TransactionPoolError> {verify42,1008
    pub fn select(&self) -> Option<Vec<Transaction>> {select55,1508
    pub fn process(&mut self, block: &Block) {process75,2252
    pub fn process_all(&mut self, blocks: &[Block]) {process_all81,2409
    pub fn undo(&mut self, block: &Block) {undo87,2543
    pub fn undo_all(&mut self, blocks: &[Block]) {undo_all93,2706
    pub fn transactions(&self) -> &HashSet<Transaction> {transactions99,2847
impl fmt::Display for TransactionPool {TransactionPool104,2941
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt105,2981
impl Eq for TransactionPool {}TransactionPool114,3250
impl PartialEq for TransactionPool {TransactionPool116,3282
    fn eq(&self, other: &Self) -> bool {eq117,3319
pub mod error;error125,3493

lib.rs,392
pub mod block;block5,90
pub mod blockchain;blockchain6,105
pub mod constants;constants7,125
pub mod error;error8,144
pub mod miner;miner9,159
pub mod network;network10,174
pub mod node;node11,191
pub mod transaction;transaction12,205
pub mod transaction_pool;transaction_pool13,226
pub mod utxo;utxo14,252
pub mod utxo_pool;utxo_pool15,266
pub mod wallet;wallet16,285

miner.rs,362
pub struct Miner {Miner7,132
impl Miner {Miner11,180
    pub fn new() -> Self {new12,193
    pub fn mine(&mut self, top: &Block, transaction_pool: &TransactionPool) -> Option<Block> {mine16,256
    pub fn mine_from(&mut self, top: &Block, transaction_pool: &TransactionPool) {mine_from29,672
    pub fn discard_block(&mut self) {discard_block40,1050

utxo/id.rs,537
pub struct UtxoId {UtxoId8,148
impl UtxoId {UtxoId13,204
    pub fn new(txid: Hash, vout: usize) -> Self {new14,218
    pub fn serialize(&self) -> Vec<u8> {serialize18,303
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,516
    pub fn txid(&self) -> &Hash {txid32,633
    pub fn vout(&self) -> usize {vout36,693
impl<B> From<B> for UtxoIdUtxoId41,754
    fn from(bytes: B) -> Self {from45,809
impl fmt::Display for UtxoId {UtxoId53,1042
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt54,1073

utxo/data.rs,718
pub struct UtxoData {UtxoData9,187
impl UtxoData {UtxoData14,256
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new15,272
    pub fn serialize(&self) -> Vec<u8> {serialize19,376
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,607
    pub fn amount(&self) -> u32 {amount33,724
    pub fn public_key(&self) -> &PublicKey {public_key37,785
impl<B> From<B> for UtxoDataUtxoData42,864
    fn from(bytes: B) -> Self {from46,921
impl From<TransactionOutput> for UtxoData {UtxoData54,1199
    fn from(transaction_output: TransactionOutput) -> Self {from55,1243
impl fmt::Display for UtxoData {UtxoData60,1353
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,1386

utxo/mod.rs,696
pub struct Utxo {Utxo9,151
impl Utxo {Utxo14,208
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new15,220
    pub fn id(&self) -> &UtxoId {id19,306
    pub fn data(&self) -> &UtxoData {data23,364
    pub fn txid(&self) -> &Hash {txid27,428
    pub fn vout(&self) -> usize {vout31,492
    pub fn amount(&self) -> u32 {amount35,556
    pub fn public_key(&self) -> &PublicKey {public_key39,624
impl Eq for Utxo {}Utxo44,710
impl PartialEq for Utxo {Utxo46,731
    fn eq(&self, other: &Self) -> bool {eq47,757
impl fmt::Display for Utxo {Utxo52,835
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt53,864
pub mod data;data65,1167
pub mod id;id66,1181
