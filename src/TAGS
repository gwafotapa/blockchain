
utxo_pool/error.rs,440
pub enum UtxoPoolError {UtxoPoolError5,48
impl fmt::Display for UtxoPoolError {UtxoPoolError15,282
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt16,320
impl error::Error for UtxoPoolError {UtxoPoolError43,1376
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source44,1414
impl From<secp256k1::Error> for UtxoPoolError {UtxoPoolError57,1873
    fn from(err: secp256k1::Error) -> Self {from58,1921

utxo_pool/mod.rs,1757
pub struct UtxoPool {UtxoPool15,422
impl UtxoPool {UtxoPool20,531
    pub fn new(keys: Vec<PublicKey>) -> Self {new21,547
    pub fn add(&mut self, utxo: Utxo) -> Result<(), UtxoPoolError> {add39,1042
    pub fn remove(&mut self, utxo: &Utxo) -> Result<UtxoData, UtxoPoolError> {remove46,1270
    pub fn contains(&self, utxo: Utxo) -> bool {contains52,1453
    pub fn owned_by(&self, pk: &PublicKey) -> HashSet<Utxo> {owned_by56,1552
    pub fn process_t(&mut self, transaction: &Transaction) {process_t64,1809
    pub fn process(&mut self, block: &Block) {process76,2299
    pub fn process_all(&mut self, blocks: &[Block]) {process_all82,2454
    pub fn undo_t(&mut self, transaction: &Transaction, blockchain: &Blockchain, block: &Block) {undo_t88,2588
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain) {undo109,3514
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain) {undo_all115,3707
    pub fn verify(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {verify121,3885
    pub fn authenticate(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {authenticate129,4253
    pub fn validate(&self, block: &Block) -> Result<(), UtxoPoolError> {validate152,5155
    pub fn size(&self) -> usize {size173,5913
    pub fn initial_utxos(&self) -> &HashMap<UtxoId, UtxoData> {initial_utxos177,5979
    pub fn utxos(&self) -> &HashMap<UtxoId, UtxoData> {utxos181,6078
impl Eq for UtxoPool {}UtxoPool186,6163
impl PartialEq for UtxoPool {UtxoPool188,6188
    fn eq(&self, other: &Self) -> bool {eq189,6218
impl fmt::Display for UtxoPool {UtxoPool196,6503
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt197,6536
pub mod error;error213,7013

node/mod.rs,1492
pub struct Node {Node20,529
impl Node {Node36,911
    pub fn new(new37,923
    pub fn run(&mut self) {run72,1886
    pub fn process_t(&mut self, transaction: Transaction) {process_t118,3792
    pub fn process_b(&mut self, block: Block) {process_b134,4394
    pub fn propagate(&self, message: Message) {propagate196,7662
    pub fn send(&self, message: &Message, neighbour: &Neighbour) {send203,7894
    pub fn shut_down(&mut self) {shut_down208,8081
    pub fn double_spend(&mut self) {double_spend234,9087
    pub fn id(&self) -> usize {id259,10058
    pub fn public_key(&self) -> &PublicKey {public_key263,10113
    pub fn secret_key(&self) -> &SecretKey {secret_key267,10190
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender271,10267
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener275,10347
    pub fn neighbours(&self) -> &Vec<Neighbour> {neighbours279,10433
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool283,10515
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool287,10589
    pub fn wallet(&self) -> &Wallet {wallet291,10684
    pub fn blockchain(&self) -> &Blockchain {blockchain295,10750
impl Eq for Node {}Node300,10830
impl PartialEq for Node {Node302,10851
    fn eq(&self, other: &Node) -> bool {eq303,10877
impl Hash for Node {Node308,10971
    fn hash<H: Hasher>(&self, state: &mut H) {hash309,10992
pub mod message;message314,11085
pub enum Behaviour {Behaviour317,11128

node/message.rs,346
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN6,86
pub enum Message<'a> {Message9,151
impl<'a, B> From<B> for Message<'a>Message15,257
    fn from(bytes: B) -> Self {from19,321
impl<'a> Message<'a> {Message32,739
    pub fn serialize(&self) -> Vec<u8> {serialize33,762
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize41,1024

blockchain/error.rs,322
pub enum BlockchainError {BlockchainError5,48
impl fmt::Display for BlockchainError {BlockchainError11,135
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,175
impl error::Error for BlockchainError {BlockchainError29,781
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source30,821

blockchain/mod.rs,1536
pub struct Blockchain {Blockchain12,265
impl Blockchain {Blockchain17,355
    pub fn new() -> Self {new18,373
    pub fn push(&mut self, block: Block) -> Result<(), BlockchainError> {push26,600
    pub fn block_delta(&self, block1: &Block, block2: &Block) -> (Vec<Block>, Vec<Block>) {block_delta45,1413
    fn range_of_blocks<'a>(&'a self, mut child: &'a Block, parent: &'a Block) -> Vec<Block> {range_of_blocks52,1717
    pub fn contains(&self, block_id: BlockHash) -> bool {contains61,2023
    pub fn contains_tx(&self, txid: &TransactionId, top: &Block) -> bool {contains_tx67,2185
    pub fn parent(&self, block: &Block) -> Option<&Block> {parent80,2531
    pub fn common_parent<'a>(common_parent84,2646
    pub fn get_utxo<'a>(&'a self, utxo_id: &UtxoId, mut block: &'a Block) -> Utxo {get_utxo110,3508
    pub fn verify_txids_of(&self, block: &Block, top: &Block) -> Result<(), BlockchainError> {verify_txids_of119,3774
    pub fn top(&self) -> &Block {top128,4087
    pub fn height(&self) -> usize {height132,4164
    pub fn len(&self) -> usize {len136,4235
    pub fn chain(&self) -> &HashMap<BlockHash, Block> {chain140,4301
    pub fn top_hash(&self) -> &BlockHash {top_hash144,4384
impl fmt::Display for Blockchain {Blockchain149,4459
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt150,4494
impl Eq for Blockchain {}Blockchain172,5117
impl PartialEq for Blockchain {Blockchain174,5144
    fn eq(&self, other: &Self) -> bool {eq175,5176
pub mod error;error185,5521

network/neighbour.rs,343
pub struct Neighbour {Neighbour5,76
impl Neighbour {Neighbour11,178
    pub fn new(id: usize, public_key: PublicKey, sender: Sender<Arc<Vec<u8>>>) -> Self {new12,195
    pub fn id(&self) -> usize {id20,376
    pub fn public_key(&self) -> &PublicKey {public_key24,431
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender28,508

network/synchronizer.rs,295
pub struct Synchronizer {Synchronizer3,39
impl Synchronizer {Synchronizer8,129
    pub fn new(barrier: Arc<Barrier>, state: Arc<Mutex<Vec<bool>>>) -> Self {new9,149
    pub fn barrier(&self) -> &Arc<Barrier> {barrier13,266
    pub fn state(&self) -> Arc<Mutex<Vec<bool>>> {state17,340

network/mod.rs,896
pub struct Network {Network21,538
impl Network {Network27,676
    pub fn with_capacity(n: usize) -> Self {with_capacity28,691
    pub fn add(&mut self, node: Node) {add36,898
    pub fn random(honest: usize, malicious: usize) -> Self {random41,1032
    pub fn run(&mut self) {run101,3254
    pub fn broadcast(&self, message: Message) {broadcast116,3696
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut123,3904
fn random_graph(vertices: usize) -> Graph {random_graph128,4017
// impl Drop for Network {Network164,5137
//     fn drop(&mut self) {drop165,5164
impl fmt::Debug for Network {Network183,5797
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt184,5827
pub mod neighbour;neighbour201,6300
pub mod synchronizer;synchronizer202,6319
mod test {test205,6355
    fn test_random_graph() {test_random_graph209,6397

constants.rs,862
pub const GENESIS_BLOCK_HASH_PREV_BLOCK: [u8; 32] = [0u8; 32];GENESIS_BLOCK_HASH_PREV_BLOCK1,0
pub const HEADER_BYTES: usize = 32 + 32 + 4 + 4;HEADER_BYTES2,63
pub const NODES: usize = 4;NODES3,112
pub const SIGNATURE_BYTES: usize = 64;SIGNATURE_BYTES4,140
pub const SPEND_PROBA: f64 = 1.0 / 1000.0;SPEND_PROBA5,179
pub const TARGET: [u8; 4] = [0x20, 1, 0, 0];TARGET6,222
pub const TX_INPUT_BYTES: usize = UTXO_ID_BYTES + SIGNATURE_BYTES;TX_INPUT_BYTES7,267
pub const TX_OUTPUT_BYTES: usize = UTXO_DATA_BYTES;TX_OUTPUT_BYTES8,334
pub const TXS_PER_BLOCK: usize = 2;TXS_PER_BLOCK9,386
pub const UTXO_AMOUNT_INIT: u32 = 10;UTXO_AMOUNT_INIT10,422
pub const UTXO_DATA_BYTES: usize = 4 + 33;UTXO_DATA_BYTES11,460
pub const UTXO_HASH_INIT: [u8; 32] = [0u8; 32];UTXO_HASH_INIT12,503
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES13,551

wallet/error.rs,298
pub enum WalletError {WalletError5,48
impl fmt::Display for WalletError {WalletError11,126
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,162
impl error::Error for WalletError {WalletError30,735
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source31,771

wallet/mod.rs,1277
pub struct Wallet {Wallet16,443
impl Wallet {Wallet23,578
    pub fn new(new24,592
    pub fn add(&mut self, utxo: Utxo) -> Result<(), WalletError> {add38,875
    pub fn remove(&mut self, utxo: &Utxo) -> Result<(), WalletError> {remove50,1216
    pub fn remove_if_utxo_from(&mut self, input: &TransactionInput) -> bool {remove_if_utxo_from58,1419
    pub fn initiate(&mut self) -> Option<Transaction> {initiate72,1769
    pub fn double_spend(&mut self) -> Option<(Transaction, Transaction)> {double_spend101,2988
    pub fn process_t(&mut self, transaction: &Transaction) {process_t126,4050
    pub fn process(&mut self, block: &Block) {process142,4608
    pub fn process_all(&mut self, blocks: &[Block]) {process_all148,4763
    pub fn undo_t(undo_t154,4897
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo188,6122
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo_all194,6341
    pub fn public_key(&self) -> &PublicKey {public_key200,6552
    pub fn utxos(&self) -> &HashSet<Utxo> {utxos204,6629
impl fmt::Display for Wallet {Wallet209,6702
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt210,6733
pub mod error;error226,7180

main.rs,24
fn main() {main18,366

transaction/mod.rs,1264
pub struct Transaction {Transaction18,468
impl Transaction {Transaction27,801
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new28,820
    pub fn sign(sign44,1285
    pub fn serialize(&self) -> Vec<u8> {serialize69,2084
    pub fn deserialize<B>(bytes: B) -> (Self, usize)deserialize79,2515
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root105,3424
    pub fn shares_utxo_with(&self, other: &Transaction) -> bool {shares_utxo_with111,3666
    pub fn bytes(&self) -> usize {bytes122,3985
    pub fn id(&self) -> &Hash {id126,4121
    pub fn inputs(&self) -> &Vec<TransactionInput> {inputs130,4177
    pub fn outputs(&self) -> &Vec<TransactionOutput> {outputs134,4258
impl Eq for Transaction {}Transaction139,4344
impl PartialEq for Transaction {Transaction141,4372
    fn eq(&self, other: &Self) -> bool {eq142,4405
impl fmt::Display for Transaction {Transaction147,4483
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt148,4519
impl HashTrait for Transaction {Transaction172,5192
    fn hash<H: Hasher>(&self, state: &mut H) {hash173,5225
pub mod input;input178,5310
pub mod merkle_tree;merkle_tree179,5325
pub mod output;output180,5346

transaction/output.rs,738
pub struct TransactionOutput(UtxoData);TransactionOutput7,114
impl TransactionOutput {TransactionOutput9,155
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new10,180
    pub fn serialize(&self) -> Vec<u8> {serialize14,296
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize18,371
    pub fn utxo_data(&self) -> &UtxoData {utxo_data25,505
    pub fn amount(&self) -> u32 {amount29,571
    pub fn public_key(&self) -> &PublicKey {public_key33,636
impl From<UtxoData> for TransactionOutput {TransactionOutput38,719
    fn from(utxo_data: UtxoData) -> Self {from39,763
impl fmt::Display for TransactionOutput {TransactionOutput44,839
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt45,881

transaction/input.rs,729
pub struct TransactionInput {TransactionInput9,178
impl TransactionInput {TransactionInput14,252
    pub fn new(utxo_id: UtxoId, sig: Signature) -> Self {new15,276
    pub fn serialize(&self) -> Vec<u8> {serialize19,371
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,600
    pub fn utxo_id(&self) -> &UtxoId {utxo_id33,717
    pub fn sig(&self) -> &Signature {sig37,785
    pub fn txid(&self) -> &Hash {txid41,848
    pub fn vout(&self) -> usize {vout45,917
impl<B> From<B> for TransactionInputTransactionInput50,988
    fn from(bytes: B) -> Self {from54,1053
impl fmt::Display for TransactionInput {TransactionInput62,1287
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt63,1328

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,83
impl Merge for MergeHash {MergeHash8,108
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,158

block/blockheader/target.rs,406
pub struct Target {Target5,85
impl Target {Target10,152
    pub fn new(exponent: u8, coefficient: [u8; 3]) -> Result<Self, BlockError> {new11,166
    pub fn hash(&self) -> Hash {hash21,454
    pub fn serialize(&self) -> Vec<u8> {serialize37,973
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize44,1150
impl<B> From<B> for TargetTarget52,1269
    fn from(bytes: B) -> Self {from56,1324

block/blockheader/mod.rs,655
pub struct BlockHeader {BlockHeader8,126
impl BlockHeader {BlockHeader15,245
    pub fn new(hash_prev_block: Hash, hash_merkle_root: Hash) -> Self {new16,264
    pub fn serialize(&self) -> Vec<u8> {serialize25,484
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize34,761
    pub fn inc_nonce(&mut self) {inc_nonce41,878
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block45,944
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root49,1026
    pub fn target(&self) -> Target {target53,1110
impl<B> From<B> for BlockHeaderBlockHeader58,1176
    fn from(bytes: B) -> Self {from62,1236
pub mod target;target81,1783

block/error.rs,292
pub enum BlockError {BlockError5,48
impl fmt::Display for BlockError {BlockError10,133
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt11,168
impl error::Error for BlockError {BlockError25,614
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source26,649

block/mod.rs,1571
pub struct Block {Block15,370
impl Block {Block21,472
    pub fn genesis() -> Self {genesis22,485
    pub fn new(parent: &Block, transactions: Vec<Transaction>) -> Result<Self, BlockError> {new35,819
    pub fn get_utxo(&self, utxo_id: &UtxoId) -> Option<Utxo> {get_utxo47,1255
    pub fn hash(&self) -> Hash {hash58,1682
    pub fn target(&self) -> Target {target66,1903
    pub fn inc_nonce(&mut self) {inc_nonce70,1976
    pub fn serialize(&self) -> Vec<u8> {serialize74,2049
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize83,2400
    pub fn contains(&self, txid: &Hash) -> bool {contains90,2517
    pub fn is_genesis(&self) -> bool {is_genesis94,2635
    pub fn transaction_count(&self) -> usize {transaction_count98,2706
    pub fn id(&self) -> Hash {id102,2792
    pub fn height(&self) -> usize {height106,2850
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block110,2913
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root114,3003
    pub fn transactions(&self) -> &Vec<Transaction> {transactions118,3095
    pub fn transactions_mut(&mut self) -> &mut Vec<Transaction> {transactions_mut122,3183
impl Eq for Block {}Block127,3289
impl PartialEq for Block {Block129,3311
    fn eq(&self, other: &Self) -> bool {eq130,3338
impl<B> From<B> for BlockBlock135,3424
    fn from(bytes: B) -> Self {from139,3478
impl fmt::Display for Block {Block162,4237
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt163,4267
pub mod blockheader;blockheader178,4701
pub mod error;error179,4722

error.rs,802
pub enum Error {Error11,274
impl fmt::Display for Error {Error19,472
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt20,502
impl error::Error for Error {Error31,865
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source32,895
impl From<BlockError> for Error {Error43,1273
    fn from(err: BlockError) -> Self {from44,1307
impl From<BlockchainError> for Error {Error49,1385
    fn from(err: BlockchainError) -> Self {from50,1424
impl From<TransactionPoolError> for Error {Error55,1512
    fn from(err: TransactionPoolError) -> Self {from56,1556
impl From<UtxoPoolError> for Error {Error61,1654
    fn from(err: UtxoPoolError) -> Self {from62,1691
impl From<WalletError> for Error {Error67,1775
    fn from(err: WalletError) -> Self {from68,1810

transaction_pool/error.rs,352
pub enum TransactionPoolError {TransactionPoolError7,83
impl fmt::Display for TransactionPoolError {TransactionPoolError13,196
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt14,241
impl error::Error for TransactionPoolError {TransactionPoolError33,865
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source34,910

transaction_pool/mod.rs,1393
pub struct TransactionPool {TransactionPool11,233
impl TransactionPool {TransactionPool15,305
    pub fn new() -> Self {new16,328
    pub fn size(&self) -> usize {size22,429
    pub fn add(&mut self, transaction: Transaction) -> Result<(), TransactionPoolError> {add26,502
    pub fn remove(&mut self, transaction: &Transaction) -> Result<(), TransactionPoolError> {remove34,752
    pub fn verify(&self, transaction: &Transaction) -> Result<(), TransactionPoolError> {verify42,1008
    pub fn select(&self) -> Option<Vec<Transaction>> {select55,1508
    pub fn process(&mut self, block: &Block) {process76,2284
    pub fn process_all(&mut self, blocks: &[Block]) {process_all86,2623
    // pub fn undo(&mut self, block: &Block) {undo92,2757
    // pub fn undo_all(&mut self, blocks: &[Block]) {undo_all98,2935
    pub fn clear(&mut self) {clear104,3091
    pub fn transactions(&self) -> &HashSet<Transaction> {transactions108,3162
    pub fn transactions_mut(&mut self) -> &mut HashSet<Transaction> {transactions_mut112,3254
impl fmt::Display for TransactionPool {TransactionPool117,3364
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt118,3404
impl Eq for TransactionPool {}TransactionPool127,3673
impl PartialEq for TransactionPool {TransactionPool129,3705
    fn eq(&self, other: &Self) -> bool {eq130,3742
pub mod error;error138,3916

lib.rs,392
pub mod block;block5,90
pub mod blockchain;blockchain6,105
pub mod constants;constants7,125
pub mod error;error8,144
pub mod miner;miner9,159
pub mod network;network10,174
pub mod node;node11,191
pub mod transaction;transaction12,205
pub mod transaction_pool;transaction_pool13,226
pub mod utxo;utxo14,252
pub mod utxo_pool;utxo_pool15,266
pub mod wallet;wallet16,285

miner.rs,358
pub struct Miner {Miner4,72
impl Miner {Miner8,120
    pub fn new() -> Self {new9,133
    pub fn mine(&mut self, top: &Block, transaction_pool: &TransactionPool) -> Option<Block> {mine13,196
    pub fn mine_from(&mut self, top: &Block, transaction_pool: &TransactionPool) {mine_from27,619
    pub fn discard_block(&mut self) {discard_block38,997

utxo/id.rs,537
pub struct UtxoId {UtxoId8,148
impl UtxoId {UtxoId13,204
    pub fn new(txid: Hash, vout: usize) -> Self {new14,218
    pub fn serialize(&self) -> Vec<u8> {serialize18,303
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,516
    pub fn txid(&self) -> &Hash {txid32,633
    pub fn vout(&self) -> usize {vout36,693
impl<B> From<B> for UtxoIdUtxoId41,754
    fn from(bytes: B) -> Self {from45,809
impl fmt::Display for UtxoId {UtxoId53,1042
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt54,1073

utxo/data.rs,718
pub struct UtxoData {UtxoData9,202
impl UtxoData {UtxoData14,271
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new15,287
    pub fn serialize(&self) -> Vec<u8> {serialize19,391
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,622
    pub fn amount(&self) -> u32 {amount33,739
    pub fn public_key(&self) -> &PublicKey {public_key37,800
impl<B> From<B> for UtxoDataUtxoData42,879
    fn from(bytes: B) -> Self {from46,936
impl From<TransactionOutput> for UtxoData {UtxoData54,1214
    fn from(transaction_output: TransactionOutput) -> Self {from55,1258
impl fmt::Display for UtxoData {UtxoData60,1368
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,1401

utxo/mod.rs,810
pub struct Utxo {Utxo9,151
impl Utxo {Utxo14,208
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new15,220
    pub fn id(&self) -> &UtxoId {id19,306
    pub fn data(&self) -> &UtxoData {data23,364
    pub fn txid(&self) -> &Hash {txid27,428
    pub fn vout(&self) -> usize {vout31,492
    pub fn amount(&self) -> u32 {amount35,556
    pub fn public_key(&self) -> &PublicKey {public_key39,624
    pub fn utxo_id(&self) -> &UtxoId {utxo_id43,708
    pub fn utxo_data(&self) -> &UtxoData {utxo_data47,771
impl Eq for Utxo {}Utxo52,842
impl PartialEq for Utxo {Utxo54,863
    fn eq(&self, other: &Self) -> bool {eq55,889
impl fmt::Display for Utxo {Utxo60,967
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,996
pub mod data;data73,1299
pub mod id;id74,1313
