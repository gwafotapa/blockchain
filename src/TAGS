
network.rs,797
pub struct Network {Network18,423
impl Network {Network24,561
    pub fn with_capacity(n: usize) -> Network {with_capacity25,576
    pub fn add(&mut self, node: Node) {add33,786
    pub fn random(nodes: usize) -> Network {random38,920
    pub fn run(&mut self) {run81,2483
    pub fn broadcast(&self, message: Message) {broadcast91,2741
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut98,2949
fn random_graph(vertices: usize) -> Graph {random_graph103,3062
// impl Drop for Network {Network142,4244
//     fn drop(&mut self) {drop143,4271
impl fmt::Debug for Network {Network161,4904
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt162,4934
mod test {test173,5289
    fn test_random_graph() {test_random_graph177,5331

node.rs,1695
pub struct Node {Node16,402
impl PartialEq for Node {Node29,770
    fn eq(&self, other: &Node) -> bool {eq30,796
impl Eq for Node {}Node35,890
impl Hash for Node {Node37,911
    fn hash<H: Hasher>(&self, state: &mut H) {hash38,932
impl Node {Node43,1025
    pub fn new(new44,1037
    pub fn run(&mut self) {run66,1722
    pub fn initiate(&mut self) -> Option<Transaction> {initiate123,4381
    pub fn public_key(&self) -> PublicKey {public_key172,6392
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender176,6467
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener180,6547
    pub fn neighbours(&self) -> &[(PublicKey, Sender<Arc<Vec<u8>>>)] {neighbours184,6633
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool188,6744
    pub fn utxo_pool_mut(&mut self) -> &mut UtxoPool {utxo_pool_mut192,6818
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool196,6908
    pub fn transaction_pool_mut(&mut self) -> &mut TransactionPool {transaction_pool_mut200,7003
    pub fn wallet(&self) -> &Wallet {wallet204,7114
    pub fn wallet_mut(&mut self) -> &mut Wallet {wallet_mut208,7180
    pub fn propagate(&self, message: Message) {propagate212,7262
    // pub fn blockchain(&self) -> &Blockchain {blockchain219,7487
    // pub fn update_transaction_pool(&mut self) -> Option<&[Transaction]> {update_transaction_pool224,7616
    //     // pub fn update_transaction_pool(&mut self) -> Option<Vec<u8>> {update_transaction_pool225,7693
    // pub fn propagate<B>(&self, bytes: B)propagate246,8563
    // pub fn mine(&mut self) -> Option<Block> {mine256,8822
    // pub fn synchronize(&mut self) {synchronize276,9697

wallet.rs,448
pub struct Wallet {Wallet6,108
impl Wallet {Wallet11,180
    pub fn new(public_key: PublicKey, utxos: Vec<Utxo>) -> Self {new12,194
    pub fn add(&mut self, utxo: Utxo) {add16,302
    pub fn remove(&mut self, input: &TransactionInput) {remove23,483
    pub fn process(&mut self, transaction: &Transaction) {process30,695
    pub fn public_key(&self) -> PublicKey {public_key71,2196
    pub fn utxos(&self) -> &[Utxo] {utxos75,2271

main.rs,24
fn main() {main13,281

chain.rs,563
pub struct Blockchain {Blockchain3,54
impl Blockchain {Blockchain8,136
    pub fn new() -> Self {new9,154
    pub fn push(&mut self, block: Block) {push16,287
    pub fn len(&self) -> usize {len21,402
    pub fn last(&self) -> &Block {last25,467
    pub fn mined_block(&self) -> Option<&Block> {mined_block29,544
    pub fn has_mined_block(&self) -> bool {has_mined_block33,635
    pub fn take_mined_block(&mut self) -> Block {take_mined_block37,721
    pub fn set_mined_block(&mut self, transactions: Vec<Transaction>) {set_mined_block41,819

common.rs,869
pub const NODES: usize = 4;NODES9,178
pub const PROBABILITY_SPEND: f64 = 1.0 / 1000000.0;PROBABILITY_SPEND10,206
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN11,258
pub const INPUT_SIZE_BYTES: usize = 32 + 8;INPUT_SIZE_BYTES12,297
pub const OUTPUT_SIZE_BYTES: usize = 4 + 33;OUTPUT_SIZE_BYTES13,341
// pub const OUTPUT_SIZE_BYTES: usize = 4 + 65;OUTPUT_SIZE_BYTES14,386
pub const INIT_UTXO_AMOUNT: u32 = 10;INIT_UTXO_AMOUNT17,463
pub const INIT_UTXO_HASH: [u8; 32] = [0u8; 32];INIT_UTXO_HASH18,501
pub enum Message<'a> {Message20,550
impl<'a, T> From<T> for Message<'a>Message26,650
    fn from(bytes: T) -> Self {from30,714
impl<'a> Message<'a> {Message42,1043
    pub fn serialize(&self) -> Vec<u8> {serialize43,1066
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize50,1272
    // pub fn from<T>(bytes: T) -> Vec<Self>from56,1388

transaction/pool.rs,1058
pub struct TransactionPool {TransactionPool10,182
impl TransactionPool {TransactionPool14,250
    pub fn new() -> Self {new15,273
    // pub fn update(&mut self, utxo_pool: &UtxoPool) -> Option<Vec<u8>> {update21,370
    pub fn size(&self) -> usize {size39,1040
    pub fn add(&mut self, transaction: Transaction) {add43,1113
    pub fn remove(&mut self, transaction: &Transaction) -> Option<Transaction> {remove47,1219
    pub fn contains(&self, transaction: &Transaction) -> bool {contains52,1392
    pub fn position(&self, transaction: &Transaction) -> Option<usize> {position56,1511
    pub fn transactions(&self) -> &[Transaction] {transactions60,1657
    // pub fn utxo(&self, input: TransactionInput) -> Option<Utxo> {utxo64,1742
impl Eq for TransactionPool {}TransactionPool69,1851
impl PartialEq for TransactionPool {TransactionPool71,1883
    fn eq(&self, other: &Self) -> bool {eq72,1920
impl Index<usize> for TransactionPool {TransactionPool79,2203
    fn index(&self, index: usize) -> &Self::Output {index82,2275

transaction/error.rs,324
pub struct InvalidTransaction;InvalidTransaction5,62
impl fmt::Display for InvalidTransaction {InvalidTransaction7,94
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt8,137
impl Error for InvalidTransaction {InvalidTransaction13,246
    fn source(&self) -> Option<&(dyn Error + 'static)> {source14,282

transaction/mod.rs,1231
pub struct Transaction {Transaction17,446
impl Transaction {Transaction23,560
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new24,579
    pub fn serialize(&self) -> Vec<u8> {serialize40,1045
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize49,1413
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root56,1539
    pub fn id(&self) -> Hash {id62,1781
    pub fn inputs(&self) -> &[TransactionInput] {inputs66,1835
    pub fn outputs(&self) -> &[TransactionOutput] {outputs70,1913
impl From<&[u8]> for Transaction {Transaction75,1996
    fn from(bytes: &[u8]) -> Self {from76,2031
impl Eq for Transaction {}Transaction95,2719
impl PartialEq for Transaction {Transaction97,2747
    fn eq(&self, other: &Self) -> bool {eq98,2780
impl fmt::Display for Transaction {Transaction103,2858
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt104,2894
impl HashTrait for Transaction {Transaction115,3154
    fn hash<H: Hasher>(&self, state: &mut H) {hash116,3187
pub mod error;error121,3272
pub mod input;input122,3287
pub mod merkle_tree;merkle_tree123,3302
pub mod output;output124,3323
pub mod pool;pool125,3339

transaction/output.rs,522
pub struct TransactionOutput {TransactionOutput7,144
impl TransactionOutput {TransactionOutput12,222
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new13,247
    pub fn serialize(&self) -> Vec<u8> {serialize17,351
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,658
    pub fn amount(&self) -> u32 {amount32,784
    pub fn public_key(&self) -> PublicKey {public_key36,845
impl From<&[u8]> for TransactionOutput {TransactionOutput41,922
    fn from(bytes: &[u8]) -> Self {from42,963

transaction/input.rs,571
pub struct TransactionInput {TransactionInput6,125
impl TransactionInput {TransactionInput11,191
    pub fn new(txid: Hash, vout: usize) -> Self {new12,215
    pub fn serialize(&self) -> Vec<u8> {serialize16,300
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize23,516
    pub fn txid(&self) -> Hash {txid30,642
    pub fn vout(&self) -> usize {vout34,700
    // pub fn utxo(&self, tx_pool: &TransactionPool) -> Option<Utxo> {utxo38,759
impl From<&[u8]> for TransactionInput {TransactionInput47,1050
    fn from(bytes: &[u8]) -> Self {from48,1090

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,91
impl Merge for MergeHash {MergeHash8,116
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,166

lib.rs,235
// pub mod block;block3,33
// pub mod chain;chain4,51
pub mod common;common5,69
pub mod network;network6,85
pub mod node;node7,102
pub mod transaction;transaction8,116
pub mod utxo;utxo9,137
pub mod wallet;wallet10,151

utxo/pool.rs,1013
pub struct UtxoPool {UtxoPool10,275
impl UtxoPool {UtxoPool14,356
    pub fn new(keys: Vec<PublicKey>) -> Self {new15,372
    pub fn add(&mut self, utxo: Utxo) {add30,804
    pub fn remove(&mut self, utxo: &Utxo) -> bool {remove35,972
    // pub fn contains(&self, utxo: &Utxo) -> bool {contains43,1267
    pub fn contains(&self, utxo: &Utxo) -> bool {contains47,1378
    // pub fn random(&self) -> Utxo {random51,1480
    pub fn owned_by(&self, pk: PublicKey) -> Vec<Utxo> {owned_by59,1786
    pub fn process(&mut self, transaction: &Transaction) -> result::Result<(), InvalidTransaction> {process67,2008
impl Eq for UtxoPool {}UtxoPool104,3337
impl PartialEq for UtxoPool {UtxoPool106,3362
    fn eq(&self, other: &Self) -> bool {eq107,3392
impl fmt::Display for UtxoPool {UtxoPool116,3731
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt117,3764
impl fmt::Debug for UtxoPool {UtxoPool125,3978
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt126,4009

utxo/mod.rs,956
pub struct Utxo {Utxo11,309
// impl PartialEq for Utxo {Utxo16,390
//     fn eq(&self, other: &Self) -> bool {eq17,419
// impl From<&[u8]> for Utxo {Utxo22,517
//     fn from(bytes: &[u8]) -> Self {from23,548
impl Utxo {Utxo30,794
    // pub fn new(txid: Hash, vout: usize, amount: u32, puzzle: usize) -> Self {new31,806
    pub fn new(input: TransactionInput, output: TransactionOutput) -> Self {new40,1016
    pub fn input(&self) -> &TransactionInput {input44,1131
    pub fn output(&self) -> &TransactionOutput {output48,1205
    pub fn txid(&self) -> Hash {txid52,1282
    pub fn vout(&self) -> usize {vout56,1348
    pub fn amount(&self) -> u32 {amount60,1415
    pub fn public_key(&self) -> PublicKey {public_key64,1485
    // pub fn serialize(&self) -> Vec<u8> {serialize68,1569
impl fmt::Display for Utxo {Utxo78,1812
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt79,1841
pub mod pool;pool94,2166

block.rs,796
const GENESIS_BLOCK_HASH_PREV_BLOCK: &[u8; 32] =GENESIS_BLOCK_HASH_PREV_BLOCK8,163
const GENESIS_BLOCK_HASH_MERKLE_ROOT: &[u8; 32] =GENESIS_BLOCK_HASH_MERKLE_ROOT10,291
pub struct Block {Block13,421
pub struct BlockHeader {BlockHeader19,523
impl Block {Block25,625
    pub fn genesis() -> Self {genesis26,638
    pub fn new(height: usize, hash_prev_block: Hash, transactions: Vec<Transaction>) -> Self {new37,979
    pub fn height(&self) -> usize {height52,1449
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block56,1512
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root60,1599
    pub fn transactions(&self) -> &Vec<Transaction> {transactions64,1688
    pub fn hash(&self) -> Hash {hash68,1776
    pub fn serialize(&self) -> Vec<u8> {serialize75,1962
