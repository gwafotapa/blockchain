
node/mod.rs,1295
pub struct Node {Node18,461
impl Node {Node33,817
    pub fn new(new34,829
    pub fn run(&mut self) {run67,1739
    pub fn process_t(&mut self, transaction: Transaction) {process_t104,3279
    pub fn process_b(&mut self, block: Block) {process_b118,3819
    pub fn propagate(&self, message: Message) {propagate151,5541
    pub fn shut_down(&mut self) {shut_down158,5773
    pub fn id(&self) -> usize {id184,6779
    pub fn public_key(&self) -> &PublicKey {public_key188,6834
    pub fn secret_key(&self) -> &SecretKey {secret_key192,6911
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender196,6988
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener200,7068
    pub fn neighbours(&self) -> &Vec<Neighbour> {neighbours204,7154
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool208,7236
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool212,7310
    pub fn wallet(&self) -> &Wallet {wallet216,7405
    pub fn blockchain(&self) -> &Blockchain {blockchain220,7471
impl Eq for Node {}Node225,7551
impl PartialEq for Node {Node227,7572
    fn eq(&self, other: &Node) -> bool {eq228,7598
impl Hash for Node {Node233,7692
    fn hash<H: Hasher>(&self, state: &mut H) {hash234,7713
pub mod message;message239,7806

node/message.rs,346
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN6,86
pub enum Message<'a> {Message9,151
impl<'a, B> From<B> for Message<'a>Message15,257
    fn from(bytes: B) -> Self {from19,321
impl<'a> Message<'a> {Message32,739
    pub fn serialize(&self) -> Vec<u8> {serialize33,762
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize41,1024

blockchain/error.rs,322
pub enum BlockchainError {BlockchainError5,48
impl fmt::Display for BlockchainError {BlockchainError10,111
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt11,151
impl error::Error for BlockchainError {BlockchainError19,443
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source20,483

blockchain/mod.rs,1400
pub struct Blockchain {Blockchain12,268
impl Blockchain {Blockchain17,358
    pub fn new() -> Self {new18,376
    pub fn push(&mut self, block: Block) -> Result<(), BlockchainError> {push26,603
    pub fn block_delta(&self, block1: &Block, block2: &Block) -> (Vec<Block>, Vec<Block>) {block_delta45,1412
    fn range_of_blocks<'a>(&'a self, mut child: &'a Block, parent: &'a Block) -> Vec<Block> {range_of_blocks52,1716
    pub fn contains(&self, block: &Block) -> bool {contains61,2022
    pub fn contains_t(&self, transaction: &Transaction) -> bool {contains_t65,2128
    pub fn parent(&self, block: &Block) -> Option<&Block> {parent78,2479
    pub fn common_parent<'a>(common_parent82,2595
    pub fn get_utxo<'a>(&'a self, utxo_id: &UtxoId, mut block: &'a Block) -> Utxo {get_utxo108,3457
    pub fn top(&self) -> &Block {top117,3723
    pub fn height(&self) -> usize {height121,3800
    pub fn len(&self) -> usize {len125,3871
    pub fn chain(&self) -> &HashMap<BlockHash, Block> {chain129,3937
    pub fn top_hash(&self) -> &BlockHash {top_hash133,4020
impl fmt::Display for Blockchain {Blockchain138,4095
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt139,4130
impl Eq for Blockchain {}Blockchain161,4785
impl PartialEq for Blockchain {Blockchain163,4812
    fn eq(&self, other: &Self) -> bool {eq164,4844
pub mod error;error174,5189

network/neighbour.rs,343
pub struct Neighbour {Neighbour5,76
impl Neighbour {Neighbour11,178
    pub fn new(id: usize, public_key: PublicKey, sender: Sender<Arc<Vec<u8>>>) -> Self {new12,195
    pub fn id(&self) -> usize {id20,376
    pub fn public_key(&self) -> &PublicKey {public_key24,431
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender28,508

network/synchronizer.rs,295
pub struct Synchronizer {Synchronizer3,39
impl Synchronizer {Synchronizer8,129
    pub fn new(barrier: Arc<Barrier>, state: Arc<Mutex<Vec<bool>>>) -> Self {new9,149
    pub fn barrier(&self) -> &Arc<Barrier> {barrier13,266
    pub fn state(&self) -> Arc<Mutex<Vec<bool>>> {state17,340

network/mod.rs,876
pub struct Network {Network21,563
impl Network {Network27,701
    pub fn with_capacity(n: usize) -> Self {with_capacity28,716
    pub fn add(&mut self, node: Node) {add36,923
    pub fn random(nodes: usize) -> Self {random41,1057
    pub fn run(&mut self) {run94,3041
    pub fn broadcast(&self, message: Message) {broadcast109,3483
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut116,3691
fn random_graph(vertices: usize) -> Graph {random_graph121,3804
// impl Drop for Network {Network157,4924
//     fn drop(&mut self) {drop158,4951
impl fmt::Debug for Network {Network176,5584
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt177,5614
pub mod neighbour;neighbour194,6087
pub mod synchronizer;synchronizer195,6106
mod test {test198,6142
    fn test_random_graph() {test_random_graph202,6184

wallet.rs,1160
pub struct Wallet {Wallet15,474
impl Wallet {Wallet22,609
    pub fn new(new23,623
    pub fn add(&mut self, utxo: Utxo) -> Result<(), TransactionError> {add38,963
    pub fn remove(&mut self, utxo: &Utxo) -> Result<(), TransactionError> {remove50,1323
    pub fn remove_if_utxo_from(&mut self, input: &TransactionInput) -> bool {remove_if_utxo_from58,1536
    pub fn initiate(&mut self) -> Option<Transaction> {initiate72,1886
    pub fn process_t(&mut self, transaction: &Transaction) {process_t117,3757
    pub fn process(&mut self, block: &Block) {process133,4314
    pub fn process_all(&mut self, blocks: &[Block]) {process_all139,4469
    pub fn undo_t(undo_t145,4603
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo179,5825
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain, utxo_pool: &UtxoPool) {undo_all185,6044
    pub fn public_key(&self) -> &PublicKey {public_key191,6255
    pub fn utxos(&self) -> &HashSet<Utxo> {utxos195,6332
impl fmt::Display for Wallet {Wallet200,6405
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt201,6436

constants.rs,866
pub const GENESIS_BLOCK_HASH_PREV_BLOCK: [u8; 32] = [0u8; 32];GENESIS_BLOCK_HASH_PREV_BLOCK1,0
pub const HEADER_BYTES: usize = 64;HEADER_BYTES2,63
pub const MINE_NEW_BLOCK_PROBA: f64 = 1.0 / 1.0;MINE_NEW_BLOCK_PROBA3,99
pub const NODES: usize = 4;NODES4,148
pub const SIGNATURE_BYTES: usize = 64;SIGNATURE_BYTES5,176
pub const SPEND_PROBA: f64 = 1.0 / 1000.0;SPEND_PROBA6,215
pub const TX_INPUT_BYTES: usize = UTXO_ID_BYTES + SIGNATURE_BYTES;TX_INPUT_BYTES7,258
pub const TX_OUTPUT_BYTES: usize = UTXO_DATA_BYTES;TX_OUTPUT_BYTES8,325
pub const TXS_PER_BLOCK: usize = 2;TXS_PER_BLOCK9,377
pub const UTXO_AMOUNT_INIT: u32 = 10;UTXO_AMOUNT_INIT10,413
pub const UTXO_DATA_BYTES: usize = 4 + 33;UTXO_DATA_BYTES11,451
pub const UTXO_HASH_INIT: [u8; 32] = [0u8; 32];UTXO_HASH_INIT12,494
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES13,542

main.rs,24
fn main() {main20,530

transaction/pool.rs,1202
pub struct TransactionPool {TransactionPool10,214
impl TransactionPool {TransactionPool14,286
    pub fn new() -> Self {new15,309
    pub fn size(&self) -> usize {size21,410
    pub fn add(&mut self, transaction: Transaction) -> Result<(), TransactionError> {add25,483
    pub fn remove(&mut self, transaction: &Transaction) -> Result<(), TransactionError> {remove33,727
    pub fn verify(&self, transaction: &Transaction) -> Result<(), TransactionError> {verify41,975
    pub fn select(&self) -> Option<Vec<Transaction>> {select54,1468
    pub fn process(&mut self, block: &Block) {process74,2212
    pub fn process_all(&mut self, blocks: &[Block]) {process_all80,2369
    pub fn undo(&mut self, block: &Block) {undo86,2503
    pub fn undo_all(&mut self, blocks: &[Block]) {undo_all92,2666
    pub fn transactions(&self) -> &HashSet<Transaction> {transactions98,2807
impl fmt::Display for TransactionPool {TransactionPool103,2901
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt104,2941
impl Eq for TransactionPool {}TransactionPool113,3226
impl PartialEq for TransactionPool {TransactionPool115,3258
    fn eq(&self, other: &Self) -> bool {eq116,3295

transaction/error.rs,464
pub enum TransactionError {TransactionError8,82
impl fmt::Display for TransactionError {TransactionError20,318
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt21,359
impl error::Error for TransactionError {TransactionError52,1674
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source53,1715
impl From<secp256k1::Error> for TransactionError {TransactionError68,2322
    fn from(err: secp256k1::Error) -> Self {from69,2373

transaction/mod.rs,1194
pub struct Transaction {Transaction18,454
impl Transaction {Transaction24,568
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new25,587
    pub fn serialize(&self) -> Vec<u8> {serialize41,1052
    pub fn deserialize<B>(bytes: B) -> (Self, usize)deserialize51,1483
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root77,2392
    pub fn bytes(&self) -> usize {bytes83,2634
    pub fn id(&self) -> Hash {id87,2770
    pub fn inputs(&self) -> &Vec<TransactionInput> {inputs91,2824
    pub fn outputs(&self) -> &Vec<TransactionOutput> {outputs95,2905
impl Eq for Transaction {}Transaction100,2991
impl PartialEq for Transaction {Transaction102,3019
    fn eq(&self, other: &Self) -> bool {eq103,3052
impl fmt::Display for Transaction {Transaction108,3130
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt109,3166
impl HashTrait for Transaction {Transaction133,3855
    fn hash<H: Hasher>(&self, state: &mut H) {hash134,3888
pub mod error;error139,3973
pub mod input;input140,3988
pub mod merkle_tree;merkle_tree141,4003
pub mod output;output142,4024
pub mod pool;pool143,4040

transaction/output.rs,737
pub struct TransactionOutput(UtxoData);TransactionOutput7,99
impl TransactionOutput {TransactionOutput9,140
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new10,165
    pub fn serialize(&self) -> Vec<u8> {serialize14,281
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize18,356
    pub fn utxo_data(&self) -> &UtxoData {utxo_data25,490
    pub fn amount(&self) -> u32 {amount29,556
    pub fn public_key(&self) -> &PublicKey {public_key33,621
impl From<UtxoData> for TransactionOutput {TransactionOutput38,704
    fn from(utxo_data: UtxoData) -> Self {from39,748
impl fmt::Display for TransactionOutput {TransactionOutput44,824
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt45,866

transaction/input.rs,730
pub struct TransactionInput {TransactionInput10,194
impl TransactionInput {TransactionInput15,268
    pub fn new(utxo_id: UtxoId, sig: Signature) -> Self {new16,292
    pub fn serialize(&self) -> Vec<u8> {serialize20,387
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize27,616
    pub fn utxo_id(&self) -> &UtxoId {utxo_id34,733
    pub fn sig(&self) -> &Signature {sig38,801
    pub fn txid(&self) -> Hash {txid42,864
    pub fn vout(&self) -> usize {vout46,932
impl<B> From<B> for TransactionInputTransactionInput51,1003
    fn from(bytes: B) -> Self {from55,1068
impl fmt::Display for TransactionInput {TransactionInput63,1302
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt64,1343

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,83
impl Merge for MergeHash {MergeHash8,108
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,158

block/error.rs,413
pub enum BlockError {BlockError6,97
impl fmt::Display for BlockError {BlockError12,210
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt13,245
impl error::Error for BlockError {BlockError26,678
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source27,713
impl From<TransactionError> for BlockError {BlockError36,984
    fn from(err: TransactionError) -> Self {from37,1029

block/mod.rs,1376
pub struct Block {Block16,347
impl Block {Block22,449
    pub fn genesis() -> Self {genesis23,462
    pub fn new(parent: &Block, transactions: Vec<Transaction>) -> Result<Self, BlockError> {new36,796
    pub fn get_utxo(&self, utxo_id: &UtxoId) -> Option<Utxo> {get_utxo49,1272
    pub fn hash(&self) -> Hash {hash60,1651
    pub fn serialize(&self) -> Vec<u8> {serialize68,1872
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize77,2223
    pub fn contains(&self, transaction: &Transaction) -> bool {contains84,2340
    pub fn is_genesis(&self) -> bool {is_genesis88,2461
    pub fn transaction_count(&self) -> usize {transaction_count92,2532
    pub fn id(&self) -> Hash {id96,2618
    pub fn height(&self) -> usize {height100,2676
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block104,2739
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root108,2828
    pub fn transactions(&self) -> &Vec<Transaction> {transactions112,2919
impl Eq for Block {}Block117,3009
impl PartialEq for Block {Block119,3031
    fn eq(&self, other: &Self) -> bool {eq120,3058
impl<B> From<B> for BlockBlock125,3144
    fn from(bytes: B) -> Self {from129,3198
impl fmt::Display for Block {Block152,3957
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt153,3987
pub mod error;error170,4487
pub mod header;header171,4502

block/header.rs,515
pub struct BlockHeader {BlockHeader4,42
impl BlockHeader {BlockHeader10,144
    pub fn new(hash_prev_block: Hash, hash_merkle_root: Hash) -> Self {new11,163
    pub fn serialize(&self) -> Vec<u8> {serialize18,326
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,505
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block32,622
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root36,702
impl<B> From<B> for BlockHeaderBlockHeader41,786
    fn from(bytes: B) -> Self {from45,846

lib.rs,278
pub mod block;block5,90
pub mod blockchain;blockchain6,105
pub mod constants;constants7,125
pub mod miner;miner8,144
pub mod network;network9,159
pub mod node;node10,176
pub mod transaction;transaction11,190
pub mod utxo;utxo12,211
pub mod wallet;wallet13,225

miner.rs,362
pub struct Miner {Miner7,127
impl Miner {Miner11,175
    pub fn new() -> Self {new12,188
    pub fn mine(&mut self, top: &Block, transaction_pool: &TransactionPool) -> Option<Block> {mine16,251
    pub fn mine_from(&mut self, top: &Block, transaction_pool: &TransactionPool) {mine_from29,667
    pub fn discard_block(&mut self) {discard_block40,1044

utxo/id.rs,536
pub struct UtxoId {UtxoId8,148
impl UtxoId {UtxoId13,204
    pub fn new(txid: Hash, vout: usize) -> Self {new14,218
    pub fn serialize(&self) -> Vec<u8> {serialize18,303
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,516
    pub fn txid(&self) -> Hash {txid32,633
    pub fn vout(&self) -> usize {vout36,691
impl<B> From<B> for UtxoIdUtxoId41,752
    fn from(bytes: B) -> Self {from45,807
impl fmt::Display for UtxoId {UtxoId53,1040
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt54,1071

utxo/data.rs,718
pub struct UtxoData {UtxoData9,187
impl UtxoData {UtxoData14,256
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new15,272
    pub fn serialize(&self) -> Vec<u8> {serialize19,376
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,607
    pub fn amount(&self) -> u32 {amount33,724
    pub fn public_key(&self) -> &PublicKey {public_key37,785
impl<B> From<B> for UtxoDataUtxoData42,864
    fn from(bytes: B) -> Self {from46,921
impl From<TransactionOutput> for UtxoData {UtxoData54,1199
    fn from(transaction_output: TransactionOutput) -> Self {from55,1243
impl fmt::Display for UtxoData {UtxoData60,1353
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,1386

utxo/pool.rs,1736
pub struct UtxoPool {UtxoPool14,418
impl UtxoPool {UtxoPool19,527
    pub fn new(keys: Vec<PublicKey>) -> Self {new20,543
    pub fn add(&mut self, utxo: Utxo) -> Result<(), TransactionError> {add39,1097
    pub fn remove(&mut self, utxo: &Utxo) -> Result<UtxoData, TransactionError> {remove46,1327
    pub fn contains(&self, utxo: Utxo) -> bool {contains52,1516
    pub fn owned_by(&self, pk: &PublicKey) -> HashSet<Utxo> {owned_by56,1615
    pub fn process_t(&mut self, transaction: &Transaction) {process_t64,1872
    pub fn process(&mut self, block: &Block) {process76,2361
    pub fn process_all(&mut self, blocks: &[Block]) {process_all82,2516
    pub fn undo_t(&mut self, transaction: &Transaction, blockchain: &Blockchain, block: &Block) {undo_t88,2650
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain) {undo109,3573
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain) {undo_all115,3766
    pub fn verify(&self, transaction: &Transaction) -> Result<(), TransactionError> {verify121,3944
    pub fn authenticate(&self, transaction: &Transaction) -> Result<(), TransactionError> {authenticate129,4303
    pub fn validate(&self, block: &Block) -> Result<(), BlockError> {validate152,5197
    pub fn size(&self) -> usize {size173,5937
    pub fn initial_utxos(&self) -> &HashMap<UtxoId, UtxoData> {initial_utxos177,6003
    pub fn utxos(&self) -> &HashMap<UtxoId, UtxoData> {utxos181,6102
impl Eq for UtxoPool {}UtxoPool186,6187
impl PartialEq for UtxoPool {UtxoPool188,6212
    fn eq(&self, other: &Self) -> bool {eq189,6242
impl fmt::Display for UtxoPool {UtxoPool196,6527
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt197,6560

utxo/mod.rs,723
pub struct Utxo {Utxo11,182
impl Utxo {Utxo16,239
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new17,251
    pub fn id(&self) -> &UtxoId {id21,337
    pub fn data(&self) -> &UtxoData {data25,395
    pub fn txid(&self) -> Hash {txid30,509
    pub fn vout(&self) -> usize {vout34,572
    pub fn amount(&self) -> u32 {amount38,636
    pub fn public_key(&self) -> &PublicKey {public_key42,704
impl Eq for Utxo {}Utxo47,790
impl PartialEq for Utxo {Utxo49,811
    fn eq(&self, other: &Self) -> bool {eq50,837
impl fmt::Display for Utxo {Utxo55,915
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt56,944
pub mod data;data68,1262
pub mod id;id69,1276
pub mod pool;pool70,1288
