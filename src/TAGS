
utxo_pool/mod.rs,2366
pub struct UtxoPool {UtxoPool15,434
impl UtxoPool {UtxoPool19,497
    pub fn new() -> Self {new20,513
    pub fn initialize(public_keys: Vec<PublicKey>) -> Self {initialize26,607
    pub fn add(&mut self, utxo: Utxo) -> Result<(), UtxoPoolError> {add40,1032
    pub fn remove(&mut self, utxo: &Utxo) -> Result<UtxoData, UtxoPoolError> {remove47,1260
    pub fn contains(&self, utxo: &Utxo) -> bool {contains53,1443
    pub fn owned_by(&self, pk: &PublicKey) -> HashSet<Utxo> {owned_by57,1543
    pub fn process_t(&mut self, transaction: &Transaction) {process_t65,1800
    pub fn process(&mut self, block: &Block) {process77,2290
    pub fn process_all(&mut self, blocks: &[Block]) {process_all83,2445
    pub fn undo_t(&mut self, transaction: &Transaction, blockchain: &Blockchain, block: &Block) {undo_t89,2579
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain) {undo103,3168
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain) {undo_all109,3361
    // pub fn verify(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {verify115,3539
    // pub fn authenticate(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {authenticate123,3928
    pub fn recalculate(recalculate146,4896
    pub fn check_utxos_exist_for(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {check_utxos_exist_for156,5160
    // pub fn check_double_spending(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {check_double_spending165,5462
    pub fn authenticate(&self, transaction: &Transaction) -> Result<(), UtxoPoolError> {authenticate173,5842
    pub fn check_utxos_exist(&self, block: &Block) -> Result<(), UtxoPoolError> {check_utxos_exist194,6653
    pub fn check_signatures_of(&self, block: &Block) -> Result<(), UtxoPoolError> {check_signatures_of201,6871
    pub fn size(&self) -> usize {size208,7082
    pub fn utxos(&self) -> &HashMap<UtxoId, UtxoData> {utxos212,7148
impl Eq for UtxoPool {}UtxoPool217,7233
impl PartialEq for UtxoPool {UtxoPool219,7258
    fn eq(&self, other: &Self) -> bool {eq220,7288
impl fmt::Display for UtxoPool {UtxoPool227,7573
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt228,7606
impl From<HashSet<Utxo>> for UtxoPool {From244,8083
    fn from(utxos: HashSet<Utxo>) -> Self {from245,8123

node/mod.rs,1854
pub struct Node {Node21,554
impl Node {Node37,936
    pub fn new(new38,948
    pub fn run(&mut self) {run74,1968
    pub fn process_t(&mut self, transaction: Transaction) {process_t124,4151
    pub fn verify(&self, transaction: &Transaction) -> Result<(), Error> {verify138,4822
    pub fn process_b(process_b147,5194
    pub fn validate(&mut self, block: &Block) -> Result<(Vec<Block>, Vec<Block>), Error> {validate167,5924
    pub fn recalculate(&mut self, blocks_to_undo: Vec<Block>, blocks_to_process: Vec<Block>) {recalculate184,6742
    // pub fn process_b(&mut self, block: Block) {process_b194,7260
    pub fn propagate(&self, message: Message) {propagate236,9631
    pub fn send(&self, message: &Message, neighbour: &Neighbour) {send243,9863
    pub fn shut_down(&mut self) {shut_down248,10050
    pub fn double_spend(&mut self) {double_spend282,11405
    pub fn id(&self) -> usize {id307,12396
    pub fn public_key(&self) -> &PublicKey {public_key311,12451
    pub fn secret_key(&self) -> &SecretKey {secret_key315,12528
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender319,12605
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener323,12685
    pub fn neighbours(&self) -> &Vec<Neighbour> {neighbours327,12771
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool331,12853
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool335,12927
    pub fn wallet(&self) -> &Wallet {wallet339,13022
    pub fn blockchain(&self) -> &Blockchain {blockchain343,13088
impl Eq for Node {}Node348,13168
impl PartialEq for Node {Node350,13189
    fn eq(&self, other: &Node) -> bool {eq351,13215
impl Hash for Node {Node356,13309
    fn hash<H: Hasher>(&self, state: &mut H) {hash357,13330
pub mod message;message362,13423
pub enum Behaviour {Behaviour365,13466

node/message.rs,346
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN6,86
pub enum Message<'a> {Message9,151
impl<'a, B> From<B> for Message<'a>Message15,257
    fn from(bytes: B) -> Self {from19,321
impl<'a> Message<'a> {Message32,739
    pub fn serialize(&self) -> Vec<u8> {serialize33,762
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize41,1024

error/transaction.rs,326
pub enum TransactionError {TransactionError5,48
impl fmt::Display for TransactionError {TransactionError9,99
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt10,140
impl error::Error for TransactionError {TransactionError17,319
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source18,360

error/wallet.rs,298
pub enum WalletError {WalletError5,48
impl fmt::Display for WalletError {WalletError11,126
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,162
impl error::Error for WalletError {WalletError30,735
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source31,771

error/blockchain.rs,322
pub enum BlockchainError {BlockchainError5,48
impl fmt::Display for BlockchainError {BlockchainError11,135
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,175
impl error::Error for BlockchainError {BlockchainError29,781
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source30,821

error/utxo_pool.rs,440
pub enum UtxoPoolError {UtxoPoolError5,63
impl fmt::Display for UtxoPoolError {UtxoPoolError15,306
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt16,344
impl error::Error for UtxoPoolError {UtxoPoolError43,1424
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source44,1462
impl From<secp256k1::Error> for UtxoPoolError {UtxoPoolError57,1930
    fn from(err: secp256k1::Error) -> Self {from58,1978

error/mod.rs,1142
pub enum Error {Error12,275
impl fmt::Display for Error {Error21,483
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt22,513
impl error::Error for Error {Error34,901
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source35,931
impl From<BlockError> for Error {Error47,1336
    fn from(err: BlockError) -> Self {from48,1370
impl From<BlockchainError> for Error {Error53,1443
    fn from(err: BlockchainError) -> Self {from54,1482
impl From<TransactionError> for Error {Error59,1565
    fn from(err: TransactionError) -> Self {from60,1605
impl From<TransactionPoolError> for Error {Error65,1690
    fn from(err: TransactionPoolError) -> Self {from66,1734
impl From<UtxoPoolError> for Error {Error71,1827
    fn from(err: UtxoPoolError) -> Self {from72,1864
impl From<WalletError> for Error {Error77,1943
    fn from(err: WalletError) -> Self {from78,1978
pub mod block;block83,2053
pub mod blockchain;blockchain84,2068
pub mod transaction;transaction85,2088
pub mod transaction_pool;transaction_pool86,2109
pub mod utxo_pool;utxo_pool87,2135
pub mod wallet;wallet88,2154

error/transaction_pool.rs,352
pub enum TransactionPoolError {TransactionPoolError7,83
impl fmt::Display for TransactionPoolError {TransactionPoolError13,196
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt14,241
impl error::Error for TransactionPoolError {TransactionPoolError33,865
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source34,910

error/block.rs,292
pub enum BlockError {BlockError5,48
impl fmt::Display for BlockError {BlockError11,153
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,188
impl error::Error for BlockError {BlockError27,716
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source28,751

blockchain/mod.rs,1939
pub struct Blockchain {Blockchain14,363
impl Blockchain {Blockchain20,499
    pub fn new(initial_utxos: HashMap<UtxoId, UtxoData>) -> Self {new21,517
    pub fn push(&mut self, block: Block) -> Result<(), BlockchainError> {push33,844
    pub fn path(&self, block1: &Block, block2: &Block) -> (Vec<Block>, Vec<Block>) {path52,1664
    fn range_of_blocks<'a>(&'a self, mut child: &'a Block, parent: &'a Block) -> Vec<Block> {range_of_blocks59,1961
    pub fn contains(&self, block_id: BlockHash) -> bool {contains68,2274
    pub fn check_id_of(&self, block: &Block) -> Result<(), BlockchainError> {check_id_of74,2436
    pub fn contains_tx(&self, txid: &TransactionId, top: Option<&Block>) -> bool {contains_tx82,2651
    pub fn check_txid_of(&self, transaction: &Transaction) -> Result<(), BlockchainError> {check_txid_of95,3042
    pub fn get_parent_of(&self, block: &Block) -> Option<&Block> {get_parent_of103,3294
    pub fn parent_of(&self, block: &Block) -> Result<&Block, BlockchainError> {parent_of107,3416
    pub fn common_parent<'a>(common_parent112,3586
    pub fn get_utxo<'a>(&'a self, utxo_id: &UtxoId, mut block: &'a Block) -> Utxo {get_utxo138,4490
    pub fn check_txids_of(&self, block: &Block) -> Result<(), BlockchainError> {check_txids_of151,4949
    pub fn top(&self) -> &Block {top160,5270
    pub fn height(&self) -> usize {height164,5347
    pub fn len(&self) -> usize {len168,5418
    pub fn chain(&self) -> &HashMap<BlockHash, Block> {chain172,5484
    pub fn top_hash(&self) -> &BlockHash {top_hash176,5567
    pub fn initial_utxos(&self) -> &HashMap<UtxoId, UtxoData> {initial_utxos180,5640
impl fmt::Display for Blockchain {Blockchain185,5741
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt186,5776
impl Eq for Blockchain {}Blockchain208,6399
impl PartialEq for Blockchain {Blockchain210,6426
    fn eq(&self, other: &Self) -> bool {eq211,6458

network/neighbour.rs,343
pub struct Neighbour {Neighbour5,76
impl Neighbour {Neighbour11,178
    pub fn new(id: usize, public_key: PublicKey, sender: Sender<Arc<Vec<u8>>>) -> Self {new12,195
    pub fn id(&self) -> usize {id20,376
    pub fn public_key(&self) -> &PublicKey {public_key24,431
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender28,508

network/synchronizer.rs,295
pub struct Synchronizer {Synchronizer3,39
impl Synchronizer {Synchronizer8,129
    pub fn new(barrier: Arc<Barrier>, state: Arc<Mutex<Vec<bool>>>) -> Self {new9,149
    pub fn barrier(&self) -> &Arc<Barrier> {barrier13,266
    pub fn state(&self) -> Arc<Mutex<Vec<bool>>> {state17,340

network/mod.rs,896
pub struct Network {Network21,538
impl Network {Network27,676
    pub fn with_capacity(n: usize) -> Self {with_capacity28,691
    pub fn add(&mut self, node: Node) {add36,898
    pub fn random(honest: usize, malicious: usize) -> Self {random41,1032
    pub fn run(&mut self) {run101,3254
    pub fn broadcast(&self, message: Message) {broadcast116,3696
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut123,3904
fn random_graph(vertices: usize) -> Graph {random_graph128,4017
// impl Drop for Network {Network164,5137
//     fn drop(&mut self) {drop165,5164
impl fmt::Debug for Network {Network183,5797
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt184,5827
pub mod neighbour;neighbour201,6300
pub mod synchronizer;synchronizer202,6319
mod test {test205,6355
    fn test_random_graph() {test_random_graph209,6397

constants.rs,862
pub const GENESIS_BLOCK_HASH_PREV_BLOCK: [u8; 32] = [0u8; 32];GENESIS_BLOCK_HASH_PREV_BLOCK1,0
pub const HEADER_BYTES: usize = 32 + 32 + 4 + 4;HEADER_BYTES2,63
pub const NODES: usize = 4;NODES3,112
pub const SIGNATURE_BYTES: usize = 64;SIGNATURE_BYTES4,140
pub const SPEND_PROBA: f64 = 1.0 / 1000.0;SPEND_PROBA5,179
pub const TARGET: [u8; 4] = [0x20, 1, 0, 0];TARGET6,222
pub const TX_INPUT_BYTES: usize = UTXO_ID_BYTES + SIGNATURE_BYTES;TX_INPUT_BYTES7,267
pub const TX_OUTPUT_BYTES: usize = UTXO_DATA_BYTES;TX_OUTPUT_BYTES8,334
pub const TXS_PER_BLOCK: usize = 2;TXS_PER_BLOCK9,386
pub const UTXO_AMOUNT_INIT: u32 = 10;UTXO_AMOUNT_INIT10,422
pub const UTXO_DATA_BYTES: usize = 4 + 33;UTXO_DATA_BYTES11,460
pub const UTXO_HASH_INIT: [u8; 32] = [0u8; 32];UTXO_HASH_INIT12,503
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES13,551

wallet/mod.rs,1312
pub struct Wallet {Wallet15,420
impl Wallet {Wallet22,555
    pub fn new(new23,569
    pub fn add(&mut self, utxo: Utxo) -> Result<(), WalletError> {add37,852
    pub fn remove(&mut self, utxo: &Utxo) -> Result<(), WalletError> {remove49,1193
    pub fn remove_if_utxo_from(&mut self, input: &TransactionInput) -> bool {remove_if_utxo_from57,1396
    pub fn initiate(&mut self) -> Option<Transaction> {initiate71,1746
    pub fn double_spend(&mut self) -> Option<(Transaction, Transaction)> {double_spend100,2965
    pub fn process_t(&mut self, transaction: &Transaction) {process_t125,4027
    pub fn process(&mut self, block: &Block) {process141,4585
    pub fn process_all(&mut self, blocks: &[Block]) {process_all147,4740
    pub fn undo_t(&mut self, transaction: &Transaction, blockchain: &Blockchain) {undo_t153,4874
    pub fn undo(&mut self, block: &Block, blockchain: &Blockchain) {undo182,6039
    pub fn undo_all(&mut self, blocks: &[Block], blockchain: &Blockchain) {undo_all188,6225
    pub fn recalculate(recalculate194,6403
    pub fn public_key(&self) -> &PublicKey {public_key204,6667
    pub fn utxos(&self) -> &HashSet<Utxo> {utxos208,6744
impl fmt::Display for Wallet {Wallet213,6817
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt214,6848

miner/mod.rs,358
pub struct Miner {Miner4,72
impl Miner {Miner8,120
    pub fn new() -> Self {new9,133
    pub fn mine(&mut self, top: &Block, transaction_pool: &TransactionPool) -> Option<Block> {mine13,196
    pub fn mine_from(&mut self, top: &Block, transaction_pool: &TransactionPool) {mine_from27,619
    pub fn discard_block(&mut self) {discard_block38,997

main.rs,24
fn main() {main20,518

transaction/mod.rs,1369
pub struct Transaction {Transaction20,548
impl Transaction {Transaction29,881
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new30,900
    pub fn sign(sign46,1365
    pub fn serialize(&self) -> Vec<u8> {serialize71,2164
    pub fn deserialize<B>(bytes: B) -> (Self, usize)deserialize81,2595
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root107,3504
    pub fn shares_utxo_with(&self, other: &Transaction) -> bool {shares_utxo_with113,3746
    pub fn check_double_spending(&self) -> Result<(), TransactionError> {check_double_spending124,4065
    pub fn bytes(&self) -> usize {bytes133,4388
    pub fn id(&self) -> &Hash {id137,4524
    pub fn inputs(&self) -> &Vec<TransactionInput> {inputs141,4580
    pub fn outputs(&self) -> &Vec<TransactionOutput> {outputs145,4661
impl Eq for Transaction {}Transaction150,4747
impl PartialEq for Transaction {Transaction152,4775
    fn eq(&self, other: &Self) -> bool {eq153,4808
impl fmt::Display for Transaction {Transaction158,4886
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt159,4922
impl HashTrait for Transaction {Transaction183,5595
    fn hash<H: Hasher>(&self, state: &mut H) {hash184,5628
pub mod input;input189,5713
pub mod merkle_tree;merkle_tree190,5728
pub mod output;output191,5749

transaction/output.rs,738
pub struct TransactionOutput(UtxoData);TransactionOutput7,114
impl TransactionOutput {TransactionOutput9,155
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new10,180
    pub fn serialize(&self) -> Vec<u8> {serialize14,296
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize18,371
    pub fn utxo_data(&self) -> &UtxoData {utxo_data25,505
    pub fn amount(&self) -> u32 {amount29,571
    pub fn public_key(&self) -> &PublicKey {public_key33,636
impl From<UtxoData> for TransactionOutput {TransactionOutput38,719
    fn from(utxo_data: UtxoData) -> Self {from39,763
impl fmt::Display for TransactionOutput {TransactionOutput44,839
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt45,881

transaction/input.rs,729
pub struct TransactionInput {TransactionInput9,178
impl TransactionInput {TransactionInput14,252
    pub fn new(utxo_id: UtxoId, sig: Signature) -> Self {new15,276
    pub fn serialize(&self) -> Vec<u8> {serialize19,371
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,600
    pub fn utxo_id(&self) -> &UtxoId {utxo_id33,717
    pub fn sig(&self) -> &Signature {sig37,785
    pub fn txid(&self) -> &Hash {txid41,848
    pub fn vout(&self) -> usize {vout45,917
impl<B> From<B> for TransactionInputTransactionInput50,988
    fn from(bytes: B) -> Self {from54,1053
impl fmt::Display for TransactionInput {TransactionInput62,1287
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt63,1328

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,83
impl Merge for MergeHash {MergeHash8,108
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,158

block/blockheader/target.rs,406
pub struct Target {Target5,85
impl Target {Target10,152
    pub fn new(exponent: u8, coefficient: [u8; 3]) -> Result<Self, BlockError> {new11,166
    pub fn hash(&self) -> Hash {hash21,454
    pub fn serialize(&self) -> Vec<u8> {serialize37,973
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize44,1150
impl<B> From<B> for TargetTarget52,1269
    fn from(bytes: B) -> Self {from56,1324

block/blockheader/mod.rs,655
pub struct BlockHeader {BlockHeader8,126
impl BlockHeader {BlockHeader15,245
    pub fn new(hash_prev_block: Hash, hash_merkle_root: Hash) -> Self {new16,264
    pub fn serialize(&self) -> Vec<u8> {serialize25,484
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize34,761
    pub fn inc_nonce(&mut self) {inc_nonce41,878
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block45,944
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root49,1026
    pub fn target(&self) -> Target {target53,1110
impl<B> From<B> for BlockHeaderBlockHeader58,1176
    fn from(bytes: B) -> Self {from62,1236
pub mod target;target81,1783

block/mod.rs,1776
pub struct Block {Block16,409
impl Block {Block22,511
    pub fn genesis() -> Self {genesis23,524
    pub fn new(parent: &Block, transactions: Vec<Transaction>) -> Result<Self, BlockError> {new36,858
    pub fn get_utxo(&self, utxo_id: &UtxoId) -> Option<Utxo> {get_utxo48,1294
    pub fn hash(&self) -> Hash {hash59,1721
    pub fn target(&self) -> Target {target67,1942
    pub fn inc_nonce(&mut self) {inc_nonce71,2015
    pub fn serialize(&self) -> Vec<u8> {serialize75,2088
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize84,2439
    pub fn check_transaction_count_is_power_of_two(&self) -> Result<(), BlockError> {check_transaction_count_is_power_of_two91,2556
    pub fn check_double_spending(&self) -> Result<(), BlockError> {check_double_spending99,2802
    pub fn contains(&self, txid: &Hash) -> bool {contains115,3321
    pub fn is_genesis(&self) -> bool {is_genesis119,3439
    pub fn transaction_count(&self) -> usize {transaction_count123,3510
    pub fn id(&self) -> Hash {id127,3596
    pub fn height(&self) -> usize {height131,3654
    pub fn hash_prev_block(&self) -> &Hash {hash_prev_block135,3717
    pub fn hash_merkle_root(&self) -> &Hash {hash_merkle_root139,3807
    pub fn transactions(&self) -> &Vec<Transaction> {transactions143,3899
    pub fn transactions_mut(&mut self) -> &mut Vec<Transaction> {transactions_mut147,3987
impl Eq for Block {}Block152,4093
impl PartialEq for Block {Block154,4115
    fn eq(&self, other: &Self) -> bool {eq155,4142
impl<B> From<B> for BlockBlock160,4228
    fn from(bytes: B) -> Self {from164,4282
impl fmt::Display for Block {Block187,5041
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt188,5071
pub mod blockheader;blockheader203,5505

transaction_pool/mod.rs,1473
pub struct TransactionPool {TransactionPool13,319
impl TransactionPool {TransactionPool17,391
    pub fn new() -> Self {new18,414
    pub fn size(&self) -> usize {size24,515
    pub fn add(&mut self, transaction: Transaction) -> Result<(), TransactionPoolError> {add28,588
    pub fn remove(&mut self, transaction: &Transaction) -> Result<(), TransactionPoolError> {remove36,838
    pub fn compatibility_of(&self, transaction: &Transaction) -> Result<(), TransactionPoolError> {compatibility_of45,1193
    pub fn select(&self) -> Option<Vec<Transaction>> {select58,1703
    pub fn process(&mut self, block: &Block) {process79,2479
    pub fn process_all(&mut self, blocks: &[Block]) {process_all89,2812
    // pub fn undo(&mut self, block: &Block) {undo97,2977
    // pub fn undo_all(&mut self, blocks: &[Block]) {undo_all103,3155
    pub fn synchronize_with(&mut self, blockchain: &Blockchain, utxo_pool: &UtxoPool) {synchronize_with111,3475
    pub fn undo_all(&mut self, blocks: Vec<Block>) {undo_all117,3720
    pub fn recalculate(recalculate125,3950
    pub fn transactions(&self) -> &HashSet<Transaction> {transactions135,4200
impl fmt::Display for TransactionPool {TransactionPool140,4294
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt141,4334
impl Eq for TransactionPool {}TransactionPool150,4603
impl PartialEq for TransactionPool {TransactionPool152,4635
    fn eq(&self, other: &Self) -> bool {eq153,4672

lib.rs,392
pub mod block;block5,90
pub mod blockchain;blockchain6,105
pub mod constants;constants7,125
pub mod error;error8,144
pub mod miner;miner9,159
pub mod network;network10,174
pub mod node;node11,191
pub mod transaction;transaction12,205
pub mod transaction_pool;transaction_pool13,226
pub mod utxo;utxo14,252
pub mod utxo_pool;utxo_pool15,266
pub mod wallet;wallet16,285

utxo/id.rs,537
pub struct UtxoId {UtxoId8,148
impl UtxoId {UtxoId13,204
    pub fn new(txid: Hash, vout: usize) -> Self {new14,218
    pub fn serialize(&self) -> Vec<u8> {serialize18,303
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,516
    pub fn txid(&self) -> &Hash {txid32,633
    pub fn vout(&self) -> usize {vout36,693
impl<B> From<B> for UtxoIdUtxoId41,754
    fn from(bytes: B) -> Self {from45,809
impl fmt::Display for UtxoId {UtxoId53,1042
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt54,1073

utxo/data.rs,718
pub struct UtxoData {UtxoData9,202
impl UtxoData {UtxoData14,271
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new15,287
    pub fn serialize(&self) -> Vec<u8> {serialize19,391
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize26,622
    pub fn amount(&self) -> u32 {amount33,739
    pub fn public_key(&self) -> &PublicKey {public_key37,800
impl<B> From<B> for UtxoDataUtxoData42,879
    fn from(bytes: B) -> Self {from46,936
impl From<TransactionOutput> for UtxoData {UtxoData54,1214
    fn from(transaction_output: TransactionOutput) -> Self {from55,1258
impl fmt::Display for UtxoData {UtxoData60,1368
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,1401

utxo/mod.rs,810
pub struct Utxo {Utxo9,151
impl Utxo {Utxo14,208
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new15,220
    pub fn id(&self) -> &UtxoId {id19,306
    pub fn data(&self) -> &UtxoData {data23,364
    pub fn txid(&self) -> &Hash {txid27,428
    pub fn vout(&self) -> usize {vout31,492
    pub fn amount(&self) -> u32 {amount35,556
    pub fn public_key(&self) -> &PublicKey {public_key39,624
    pub fn utxo_id(&self) -> &UtxoId {utxo_id43,708
    pub fn utxo_data(&self) -> &UtxoData {utxo_data47,771
impl Eq for Utxo {}Utxo52,842
impl PartialEq for Utxo {Utxo54,863
    fn eq(&self, other: &Self) -> bool {eq55,889
impl fmt::Display for Utxo {Utxo60,967
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,996
pub mod data;data73,1299
pub mod id;id74,1313
