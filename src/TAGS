
network.rs,797
pub struct Network {Network18,423
impl Network {Network24,561
    pub fn with_capacity(n: usize) -> Network {with_capacity25,576
    pub fn add(&mut self, node: Node) {add33,786
    pub fn random(nodes: usize) -> Network {random38,920
    pub fn run(&mut self) {run81,2483
    pub fn broadcast(&self, message: Message) {broadcast91,2741
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut98,2949
fn random_graph(vertices: usize) -> Graph {random_graph103,3062
// impl Drop for Network {Network142,4244
//     fn drop(&mut self) {drop143,4271
impl fmt::Debug for Network {Network161,4904
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt162,4934
mod test {test173,5289
    fn test_random_graph() {test_random_graph177,5331

node.rs,1695
pub struct Node {Node16,420
impl PartialEq for Node {Node29,788
    fn eq(&self, other: &Node) -> bool {eq30,814
impl Eq for Node {}Node35,908
impl Hash for Node {Node37,929
    fn hash<H: Hasher>(&self, state: &mut H) {hash38,950
impl Node {Node43,1043
    pub fn new(new44,1055
    pub fn run(&mut self) {run66,1741
    pub fn initiate(&mut self) -> Option<Transaction> {initiate123,4406
    pub fn public_key(&self) -> PublicKey {public_key173,6483
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender177,6558
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener181,6638
    pub fn neighbours(&self) -> &[(PublicKey, Sender<Arc<Vec<u8>>>)] {neighbours185,6724
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool189,6835
    pub fn utxo_pool_mut(&mut self) -> &mut UtxoPool {utxo_pool_mut193,6909
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool197,6999
    pub fn transaction_pool_mut(&mut self) -> &mut TransactionPool {transaction_pool_mut201,7094
    pub fn wallet(&self) -> &Wallet {wallet205,7205
    pub fn wallet_mut(&mut self) -> &mut Wallet {wallet_mut209,7271
    pub fn propagate(&self, message: Message) {propagate213,7353
    // pub fn blockchain(&self) -> &Blockchain {blockchain220,7578
    // pub fn update_transaction_pool(&mut self) -> Option<&[Transaction]> {update_transaction_pool225,7707
    //     // pub fn update_transaction_pool(&mut self) -> Option<Vec<u8>> {update_transaction_pool226,7784
    // pub fn propagate<B>(&self, bytes: B)propagate247,8654
    // pub fn mine(&mut self) -> Option<Block> {mine257,8913
    // pub fn synchronize(&mut self) {synchronize277,9788

wallet.rs,449
pub struct Wallet {Wallet6,128
impl Wallet {Wallet11,200
    pub fn new(public_key: PublicKey, utxos: Vec<Utxo>) -> Self {new12,214
    pub fn add(&mut self, utxo: Utxo) {add16,322
    pub fn remove(&mut self, input: &TransactionInput) {remove23,503
    pub fn process(&mut self, transaction: &Transaction) {process30,750
    pub fn public_key(&self) -> &PublicKey {public_key46,1284
    pub fn utxos(&self) -> &[Utxo] {utxos50,1361

main.rs,24
fn main() {main22,611

chain.rs,563
pub struct Blockchain {Blockchain3,54
impl Blockchain {Blockchain8,136
    pub fn new() -> Self {new9,154
    pub fn push(&mut self, block: Block) {push16,287
    pub fn len(&self) -> usize {len21,402
    pub fn last(&self) -> &Block {last25,467
    pub fn mined_block(&self) -> Option<&Block> {mined_block29,544
    pub fn has_mined_block(&self) -> bool {has_mined_block33,635
    pub fn take_mined_block(&mut self) -> Block {take_mined_block37,721
    pub fn set_mined_block(&mut self, transactions: Vec<Transaction>) {set_mined_block41,819

common.rs,856
pub const NODES: usize = 4;NODES8,150
pub const PROBABILITY_SPEND: f64 = 1.0 / 1000000.0;PROBABILITY_SPEND9,178
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN10,230
pub const INPUT_SIZE_BYTES: usize = 32 + 8;INPUT_SIZE_BYTES11,269
pub const OUTPUT_SIZE_BYTES: usize = 4 + 33;OUTPUT_SIZE_BYTES12,313
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES13,358
pub const INIT_UTXO_AMOUNT: u32 = 10;INIT_UTXO_AMOUNT16,428
pub const INIT_UTXO_HASH: [u8; 32] = [0u8; 32];INIT_UTXO_HASH17,466
pub enum Message<'a> {Message19,515
impl<'a, T> From<T> for Message<'a>Message24,594
    fn from(bytes: T) -> Self {from28,658
impl<'a> Message<'a> {Message40,987
    pub fn serialize(&self) -> Vec<u8> {serialize41,1010
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize48,1216
    // pub fn from<T>(bytes: T) -> Vec<Self>from54,1332

transaction/pool.rs,880
pub struct TransactionPool {TransactionPool9,151
impl TransactionPool {TransactionPool13,219
    pub fn new() -> Self {new14,242
    pub fn size(&self) -> usize {size20,339
    pub fn add(&mut self, transaction: Transaction) {add24,412
    pub fn remove(&mut self, transaction: &Transaction) -> Option<Transaction> {remove28,518
    pub fn contains(&self, transaction: &Transaction) -> bool {contains33,691
    pub fn position(&self, transaction: &Transaction) -> Option<usize> {position37,810
    pub fn transactions(&self) -> &[Transaction] {transactions41,956
impl Eq for TransactionPool {}TransactionPool46,1043
impl PartialEq for TransactionPool {TransactionPool48,1075
    fn eq(&self, other: &Self) -> bool {eq49,1112
impl Index<usize> for TransactionPool {TransactionPool56,1395
    fn index(&self, index: usize) -> &Self::Output {index59,1467

transaction/error.rs,324
pub struct InvalidTransaction;InvalidTransaction5,62
impl fmt::Display for InvalidTransaction {InvalidTransaction7,94
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt8,137
impl Error for InvalidTransaction {InvalidTransaction13,246
    fn source(&self) -> Option<&(dyn Error + 'static)> {source14,282

transaction/mod.rs,1239
pub struct Transaction {Transaction17,446
impl Transaction {Transaction23,560
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new24,579
    pub fn serialize(&self) -> Vec<u8> {serialize40,1045
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize49,1413
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root56,1539
    pub fn id(&self) -> &Hash {id62,1781
    pub fn inputs(&self) -> &[TransactionInput] {inputs66,1837
    pub fn outputs(&self) -> &[TransactionOutput] {outputs70,1915
impl From<&[u8]> for Transaction {Transaction75,1998
    fn from(bytes: &[u8]) -> Self {from76,2033
impl Eq for Transaction {}Transaction97,2741
impl PartialEq for Transaction {Transaction99,2769
    fn eq(&self, other: &Self) -> bool {eq100,2802
// impl fmt::Display for Transaction {Transaction105,2880
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt106,2919
impl HashTrait for Transaction {Transaction117,3209
    fn hash<H: Hasher>(&self, state: &mut H) {hash118,3242
pub mod error;error123,3327
pub mod input;input124,3342
pub mod merkle_tree;merkle_tree125,3357
pub mod output;output126,3378
pub mod pool;pool127,3394

transaction/output.rs,523
pub struct TransactionOutput {TransactionOutput7,144
impl TransactionOutput {TransactionOutput12,222
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new13,247
    pub fn serialize(&self) -> Vec<u8> {serialize17,351
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize24,584
    pub fn amount(&self) -> u32 {amount31,710
    pub fn public_key(&self) -> &PublicKey {public_key35,771
impl From<&[u8]> for TransactionOutput {TransactionOutput40,850
    fn from(bytes: &[u8]) -> Self {from41,891

transaction/input.rs,533
pub struct TransactionInput {TransactionInput7,138
impl TransactionInput {TransactionInput11,192
    pub fn new(utxo_id: UtxoId) -> Self {new12,216
    pub fn serialize(&self) -> Vec<u8> {serialize16,290
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize20,371
    pub fn utxo_id(&self) -> &UtxoId {utxo_id27,497
    pub fn txid(&self) -> &Hash {txid31,565
    pub fn vout(&self) -> usize {vout35,635
impl From<&[u8]> for TransactionInput {TransactionInput40,706
    fn from(bytes: &[u8]) -> Self {from41,746

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,91
impl Merge for MergeHash {MergeHash8,116
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,166

lib.rs,171
pub mod common;common1,0
pub mod network;network2,16
pub mod node;node3,33
pub mod transaction;transaction4,47
pub mod utxo;utxo5,68
pub mod wallet;wallet6,82

utxo/pool.rs,1002
pub struct UtxoPool {UtxoPool11,301
impl UtxoPool {UtxoPool15,363
    pub fn new(keys: Vec<PublicKey>) -> Self {new16,379
    pub fn add(&mut self, utxo: Utxo) {add31,792
    pub fn remove(&mut self, utxo: &Utxo) -> Option<UtxoData> {remove35,885
    pub fn contains(&self, utxo: Utxo) -> bool {contains39,992
    // pub fn find(&self, input: &TransactionInput) -> Option<UtxoData> {find43,1090
    pub fn owned_by(&self, pk: &PublicKey) -> Vec<Utxo> {owned_by47,1246
    pub fn process(&mut self, transaction: &Transaction) -> result::Result<(), InvalidTransaction> {process55,1498
// impl Eq for UtxoPool {}UtxoPool73,2177
// impl PartialEq for UtxoPool {UtxoPool75,2205
//     fn eq(&self, other: &Self) -> bool {eq76,2238
// impl fmt::Display for UtxoPool {UtxoPool85,2601
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt86,2637
// impl fmt::Debug for UtxoPool {UtxoPool94,2872
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt95,2906

utxo/mod.rs,1769
pub struct Utxo {Utxo10,166
pub struct UtxoId {UtxoId16,268
pub struct UtxoData {UtxoData22,363
impl Utxo {Utxo27,432
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new28,444
    // pub fn new(txid: Hash, vout: usize, amount: u32, public_key: PublicKey) -> Self {new31,529
    pub fn id(&self) -> &UtxoId {id37,759
    pub fn data(&self) -> &UtxoData {data41,817
    pub fn txid(&self) -> &Hash {txid45,881
    pub fn vout(&self) -> usize {vout49,946
    pub fn amount(&self) -> u32 {amount53,1010
    pub fn public_key(&self) -> &PublicKey {public_key57,1078
    // pub fn serialize(&self) -> Vec<u8> {serialize61,1162
impl Eq for Utxo {}Utxo71,1405
impl PartialEq for Utxo {Utxo73,1426
    fn eq(&self, other: &Self) -> bool {eq74,1452
// impl From<(UtxoId, UtxoData)> for Utxo {Utxo79,1530
//     fn from(u: (UtxoId, UtxoData)) -> Self {from80,1574
// impl From<&[u8]> for Utxo {Utxo85,1706
//     fn from(bytes: &[u8]) -> Self {from86,1737
// impl fmt::Display for Utxo {Utxo93,1983
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt94,2015
impl UtxoId {UtxoId107,2389
    pub fn new(txid: Hash, vout: usize) -> Self {new108,2403
    pub fn serialize(&self) -> Vec<u8> {serialize112,2488
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize119,2701
    pub fn txid(&self) -> &Hash {txid126,2827
    pub fn vout(&self) -> usize {vout130,2887
impl From<&[u8]> for UtxoId {UtxoId135,2948
    fn from(bytes: &[u8]) -> Self {from136,2978
impl UtxoData {UtxoData143,3179
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new144,3195
    pub fn amount(&self) -> u32 {amount148,3299
    pub fn public_key(&self) -> &PublicKey {public_key152,3360
pub mod pool;pool157,3439

block.rs,796
const GENESIS_BLOCK_HASH_PREV_BLOCK: &[u8; 32] =GENESIS_BLOCK_HASH_PREV_BLOCK8,163
const GENESIS_BLOCK_HASH_MERKLE_ROOT: &[u8; 32] =GENESIS_BLOCK_HASH_MERKLE_ROOT10,291
pub struct Block {Block13,421
pub struct BlockHeader {BlockHeader19,523
impl Block {Block25,625
    pub fn genesis() -> Self {genesis26,638
    pub fn new(height: usize, hash_prev_block: Hash, transactions: Vec<Transaction>) -> Self {new37,979
    pub fn height(&self) -> usize {height52,1449
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block56,1512
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root60,1599
    pub fn transactions(&self) -> &Vec<Transaction> {transactions64,1688
    pub fn hash(&self) -> Hash {hash68,1776
    pub fn serialize(&self) -> Vec<u8> {serialize75,1962
