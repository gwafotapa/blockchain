
blockchain/error.rs,322
pub enum BlockchainError {BlockchainError5,48
impl fmt::Display for BlockchainError {BlockchainError10,111
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt11,151
impl error::Error for BlockchainError {BlockchainError19,443
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source20,483

blockchain/mod.rs,1293
pub struct Blockchain {Blockchain12,276
impl Blockchain {Blockchain17,366
    pub fn new() -> Self {new18,384
    pub fn push(&mut self, block: Block) -> Result<(), BlockchainError> {push26,611
    pub fn transaction_delta(&self, new_top: &Block) -> (Vec<Transaction>, Vec<Transaction>) {transaction_delta40,1056
    fn new_transactions_between<'a>(new_transactions_between48,1463
    pub fn contains(&self, block: &Block) -> bool {contains61,1824
    pub fn parent(&self, block: &Block) -> Option<&Block> {parent65,1930
    pub fn common_parent<'a>(common_parent69,2046
    pub fn get_utxo_from<'a>(&'a self, input: &TransactionInput, mut block: &'a Block) -> Utxo {get_utxo_from95,2944
    pub fn top(&self) -> &Block {top104,3226
    pub fn height(&self) -> usize {height108,3303
    pub fn len(&self) -> usize {len112,3374
    pub fn chain(&self) -> &HashMap<BlockHash, Block> {chain116,3440
    pub fn top_hash(&self) -> &BlockHash {top_hash120,3523
impl fmt::Display for Blockchain {Blockchain125,3598
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt126,3633
impl Eq for Blockchain {}Blockchain141,4082
impl PartialEq for Blockchain {Blockchain143,4109
    fn eq(&self, other: &Self) -> bool {eq144,4141
pub mod error;error154,4486

node.rs,1261
pub struct Node {Node18,469
impl Node {Node33,825
    pub fn new(new34,837
    pub fn run(&mut self) {run67,1747
    pub fn process_t(&mut self, transaction: Transaction) {process_t102,3234
    pub fn process_b(&mut self, block: Block) {process_b115,3703
    pub fn propagate(&self, message: Message) {propagate159,6018
    pub fn shut_down(&mut self) {shut_down166,6250
    pub fn id(&self) -> usize {id198,7441
    pub fn public_key(&self) -> &PublicKey {public_key202,7496
    pub fn secret_key(&self) -> &SecretKey {secret_key206,7573
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender210,7650
    pub fn listener(&self) -> &Receiver<Arc<Vec<u8>>> {listener214,7730
    pub fn neighbours(&self) -> &Vec<Neighbour> {neighbours218,7816
    pub fn utxo_pool(&self) -> &UtxoPool {utxo_pool222,7898
    pub fn transaction_pool(&self) -> &TransactionPool {transaction_pool226,7972
    pub fn wallet(&self) -> &Wallet {wallet230,8067
    pub fn blockchain(&self) -> &Blockchain {blockchain234,8133
impl Eq for Node {}Node239,8213
impl PartialEq for Node {Node241,8234
    fn eq(&self, other: &Node) -> bool {eq242,8260
impl Hash for Node {Node247,8354
    fn hash<H: Hasher>(&self, state: &mut H) {hash248,8375

network/neighbour.rs,343
pub struct Neighbour {Neighbour5,76
impl Neighbour {Neighbour11,178
    pub fn new(id: usize, public_key: PublicKey, sender: Sender<Arc<Vec<u8>>>) -> Self {new12,195
    pub fn id(&self) -> usize {id20,376
    pub fn public_key(&self) -> &PublicKey {public_key24,431
    pub fn sender(&self) -> &Sender<Arc<Vec<u8>>> {sender28,508

network/synchronizer.rs,410
pub struct Synchronizer {Synchronizer3,39
impl Synchronizer {Synchronizer9,150
    pub fn new(barrier: Arc<Barrier>, state: Arc<Mutex<Vec<bool>>>) -> Self {new10,170
    pub fn barrier(&self) -> &Arc<Barrier> {barrier18,350
    pub fn state(&self) -> Arc<Mutex<Vec<bool>>> {state22,424
    pub fn shut_down(&mut self) {shut_down26,514
    pub fn has_shut_down(&self) -> bool {has_shut_down30,586

network/mod.rs,876
pub struct Network {Network21,518
impl Network {Network27,656
    pub fn with_capacity(n: usize) -> Self {with_capacity28,671
    pub fn add(&mut self, node: Node) {add36,878
    pub fn random(nodes: usize) -> Self {random41,1012
    pub fn run(&mut self) {run94,2996
    pub fn broadcast(&self, message: Message) {broadcast109,3438
    pub fn threads_mut(&mut self) -> &mut Vec<Option<JoinHandle<Node>>> {threads_mut116,3646
fn random_graph(vertices: usize) -> Graph {random_graph121,3759
// impl Drop for Network {Network157,4879
//     fn drop(&mut self) {drop158,4906
impl fmt::Debug for Network {Network176,5539
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt177,5569
pub mod neighbour;neighbour194,6042
pub mod synchronizer;synchronizer195,6061
mod test {test198,6097
    fn test_random_graph() {test_random_graph202,6139

wallet.rs,836
pub struct Wallet {Wallet12,386
impl Wallet {Wallet19,517
    pub fn new(new20,531
    pub fn add(&mut self, utxo: Utxo) {add35,865
    pub fn remove(&mut self, utxo: &Utxo) {remove42,1046
    pub fn remove_utxo_from(&mut self, input: &TransactionInput) {remove_utxo_from49,1228
    pub fn initiate(&mut self) -> Option<Transaction> {initiate56,1455
    pub fn process(&mut self, transaction: &Transaction) {process101,3326
    pub fn process_all(&mut self, transactions: &[Transaction]) {process_all117,3868
    pub fn undo(undo123,4032
    pub fn undo_all(undo_all157,5260
    pub fn public_key(&self) -> &PublicKey {public_key169,5601
    pub fn utxos(&self) -> &Vec<Utxo> {utxos173,5678
impl fmt::Display for Wallet {Wallet178,5747
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt179,5778

main.rs,24
fn main() {main15,323

common.rs,1232
pub const GENESIS_BLOCK_HASH_PREV_BLOCK: [u8; 32] = [0u8; 32];GENESIS_BLOCK_HASH_PREV_BLOCK9,175
pub const HEADER_BYTES: usize = 64;HEADER_BYTES10,238
pub const MINE_NEW_BLOCK_PROBA: f64 = 1.0 / 1.0;MINE_NEW_BLOCK_PROBA11,274
pub const NODES: usize = 4;NODES12,323
pub const SIGNATURE_BYTES: usize = 64;SIGNATURE_BYTES13,351
pub const SPEND_PROBA: f64 = 1.0 / 1000000.0;SPEND_PROBA14,390
pub const TX_INPUT_BYTES: usize = UTXO_ID_BYTES + SIGNATURE_BYTES;TX_INPUT_BYTES15,436
pub const TX_OUTPUT_BYTES: usize = UTXO_DATA_BYTES;TX_OUTPUT_BYTES16,503
pub const TXS_PER_BLOCK: usize = 2;TXS_PER_BLOCK17,555
pub const UTXO_AMOUNT_INIT: u32 = 10;UTXO_AMOUNT_INIT18,591
pub const UTXO_DATA_BYTES: usize = 4 + 33;UTXO_DATA_BYTES19,629
pub const UTXO_HASH_INIT: [u8; 32] = [0u8; 32];UTXO_HASH_INIT20,672
pub const UTXO_ID_BYTES: usize = 32 + 8;UTXO_ID_BYTES21,720
const SHUT_DOWN: &[u8] = b"Shut down";SHUT_DOWN23,762
pub enum Message<'a> {Message26,827
impl<'a, B> From<B> for Message<'a>Message32,933
    fn from(bytes: B) -> Self {from36,997
impl<'a> Message<'a> {Message49,1415
    pub fn serialize(&self) -> Vec<u8> {serialize50,1438
    pub fn deserialize<T>(bytes: T) -> Selfdeserialize58,1700

transaction/pool.rs,1254
pub struct TransactionPool {TransactionPool12,259
impl TransactionPool {TransactionPool16,327
    pub fn new() -> Self {new17,350
    pub fn size(&self) -> usize {size23,447
    pub fn add(&mut self, transaction: Transaction) {add28,559
    pub fn remove(&mut self, transaction: &Transaction) -> Option<Transaction> {remove32,665
    pub fn contains(&self, transaction: &Transaction) -> bool {contains37,838
    pub fn position(&self, transaction: &Transaction) -> Option<usize> {position41,957
    pub fn select(&self) -> Option<Vec<Transaction>> {select45,1103
    pub fn add_all(&mut self, transactions: Vec<Transaction>) {add_all57,1422
    pub fn remove_all(&mut self, transactions: &[Transaction]) {remove_all63,1579
    pub fn transactions(&self) -> &Vec<Transaction> {transactions69,1741
impl fmt::Display for TransactionPool {TransactionPool74,1831
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt75,1871
impl Eq for TransactionPool {}TransactionPool84,2156
impl PartialEq for TransactionPool {TransactionPool86,2188
    fn eq(&self, other: &Self) -> bool {eq87,2225
impl Index<usize> for TransactionPool {TransactionPool94,2508
    fn index(&self, index: usize) -> &Self::Output {index97,2580

transaction/error.rs,460
pub enum TransactionError {TransactionError5,48
impl fmt::Display for TransactionError {TransactionError10,136
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt11,177
impl error::Error for TransactionError {TransactionError19,416
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source20,457
impl From<secp256k1::Error> for TransactionError {TransactionError28,681
    fn from(err: secp256k1::Error) -> Self {from29,732

transaction/mod.rs,1298
pub struct Transaction {Transaction17,440
impl Transaction {Transaction23,554
    pub fn new(inputs: Vec<TransactionInput>, outputs: Vec<TransactionOutput>) -> Self {new24,573
    pub fn serialize(&self) -> Vec<u8> {serialize40,1038
    pub fn deserialize<B>(bytes: B) -> (Self, usize)deserialize50,1469
    pub fn hash_merkle_root(transactions: &Vec<Self>) -> Hash {hash_merkle_root76,2378
    pub fn bytes(&self) -> usize {bytes82,2620
    pub fn id(&self) -> Hash {id86,2756
    pub fn inputs(&self) -> &Vec<TransactionInput> {inputs90,2810
    pub fn outputs(&self) -> &Vec<TransactionOutput> {outputs94,2891
// impl<B> From<B> for TransactionTransaction99,2977
//     fn from(bytes: B) -> Self {from103,3049
impl Eq for Transaction {}Transaction127,3960
impl PartialEq for Transaction {Transaction129,3988
    fn eq(&self, other: &Self) -> bool {eq130,4021
impl fmt::Display for Transaction {Transaction135,4099
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt136,4135
impl HashTrait for Transaction {Transaction160,4824
    fn hash<H: Hasher>(&self, state: &mut H) {hash161,4857
pub mod error;error166,4942
pub mod input;input167,4957
pub mod merkle_tree;merkle_tree168,4972
pub mod output;output169,4993
pub mod pool;pool170,5009

transaction/output.rs,564
pub struct TransactionOutput(pub UtxoData);TransactionOutput7,151
impl TransactionOutput {TransactionOutput9,196
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new10,221
    pub fn serialize(&self) -> Vec<u8> {serialize14,337
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize18,412
    pub fn amount(&self) -> u32 {amount25,546
    pub fn public_key(&self) -> &PublicKey {public_key29,611
// impl fmt::Display for TransactionOutput {TransactionOutput34,694
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt35,739

transaction/input.rs,734
pub struct TransactionInput {TransactionInput7,150
impl TransactionInput {TransactionInput12,224
    pub fn new(utxo_id: UtxoId, sig: Signature) -> Self {new13,248
    pub fn serialize(&self) -> Vec<u8> {serialize17,343
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize24,572
    pub fn utxo_id(&self) -> &UtxoId {utxo_id31,689
    pub fn sig(&self) -> &Signature {sig35,757
    pub fn txid(&self) -> Hash {txid39,820
    pub fn vout(&self) -> usize {vout43,888
impl<B> From<B> for TransactionInputTransactionInput48,959
    fn from(bytes: B) -> Self {from52,1024
// impl fmt::Display for TransactionInput {TransactionInput60,1258
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt61,1302

transaction/merkle_tree.rs,163
pub struct MergeHash {}MergeHash6,91
impl Merge for MergeHash {MergeHash8,116
    fn merge(left: &Self::Item, right: &Self::Item) -> Self::Item {merge11,166

block/error.rs,412
pub enum BlockError {BlockError6,97
impl fmt::Display for BlockError {BlockError11,191
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt12,226
impl error::Error for BlockError {BlockError22,525
    fn source(&self) -> Option<&(dyn error::Error + 'static)> {source23,560
impl From<TransactionError> for BlockError {BlockError31,784
    fn from(err: TransactionError) -> Self {from32,829

block/mod.rs,1311
pub struct Block {Block15,353
impl Block {Block21,455
    pub fn genesis() -> Self {genesis22,468
    pub fn new(parent: &Block, transactions: Vec<Transaction>) -> Result<Self, BlockError> {new35,802
    pub fn get_utxo_from(&self, input: &TransactionInput) -> Option<Utxo> {get_utxo_from47,1238
    pub fn hash(&self) -> Hash {hash59,1691
    pub fn serialize(&self) -> Vec<u8> {serialize67,1912
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize76,2263
    pub fn is_genesis(&self) -> bool {is_genesis83,2380
    pub fn transaction_count(&self) -> usize {transaction_count87,2451
    pub fn id(&self) -> Hash {id91,2537
    pub fn height(&self) -> usize {height95,2595
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block99,2658
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root103,2747
    pub fn transactions(&self) -> &Vec<Transaction> {transactions107,2838
impl Eq for Block {}Block112,2928
impl PartialEq for Block {Block114,2950
    fn eq(&self, other: &Self) -> bool {eq115,2977
impl<B> From<B> for BlockBlock120,3063
    fn from(bytes: B) -> Self {from124,3117
impl fmt::Display for Block {Block147,3876
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt148,3906
pub mod error;error165,4406
pub mod header;header166,4421

block/header.rs,515
pub struct BlockHeader {BlockHeader4,50
impl BlockHeader {BlockHeader10,152
    pub fn new(hash_prev_block: Hash, hash_merkle_root: Hash) -> Self {new11,171
    pub fn serialize(&self) -> Vec<u8> {serialize18,334
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize25,513
    pub fn hash_prev_block(&self) -> Hash {hash_prev_block32,630
    pub fn hash_merkle_root(&self) -> Hash {hash_merkle_root36,710
impl<B> From<B> for BlockHeaderBlockHeader41,794
    fn from(bytes: B) -> Self {from45,854

lib.rs,261
pub mod block;block1,0
pub mod blockchain;blockchain2,15
pub mod common;common3,35
pub mod miner;miner4,51
pub mod network;network5,66
pub mod node;node6,83
pub mod transaction;transaction7,97
pub mod utxo;utxo8,118
pub mod wallet;wallet9,132

miner.rs,362
pub struct Miner {Miner7,124
impl Miner {Miner11,172
    pub fn new() -> Self {new12,185
    pub fn mine(&mut self, top: &Block, transaction_pool: &TransactionPool) -> Option<Block> {mine16,248
    pub fn mine_from(&mut self, top: &Block, transaction_pool: &TransactionPool) {mine_from29,664
    pub fn discard_block(&mut self) {discard_block40,1041

utxo/id.rs,542
pub struct UtxoId {UtxoId6,122
impl UtxoId {UtxoId11,178
    pub fn new(txid: Hash, vout: usize) -> Self {new12,192
    pub fn serialize(&self) -> Vec<u8> {serialize16,277
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize23,490
    pub fn txid(&self) -> Hash {txid30,607
    pub fn vout(&self) -> usize {vout34,665
impl<B> From<B> for UtxoIdUtxoId39,726
    fn from(bytes: B) -> Self {from43,781
// impl fmt::Display for UtxoId {UtxoId51,1014
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt52,1048

utxo/data.rs,589
pub struct UtxoData {UtxoData7,121
impl UtxoData {UtxoData12,190
    pub fn new(amount: u32, public_key: PublicKey) -> Self {new13,206
    pub fn serialize(&self) -> Vec<u8> {serialize17,310
    pub fn deserialize<B>(bytes: B) -> Selfdeserialize24,541
    pub fn amount(&self) -> u32 {amount31,658
    pub fn public_key(&self) -> &PublicKey {public_key35,719
impl<B> From<B> for UtxoDataUtxoData40,798
    fn from(bytes: B) -> Self {from44,855
// impl fmt::Display for UtxoData {UtxoData52,1133
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt53,1169

utxo/pool.rs,1300
pub struct UtxoPool {UtxoPool13,397
impl UtxoPool {UtxoPool18,506
    pub fn new(keys: Vec<PublicKey>) -> Self {new19,522
    pub fn add(&mut self, utxo: Utxo) {add37,1017
    pub fn remove(&mut self, utxo: &Utxo) -> Option<UtxoData> {remove41,1111
    pub fn contains(&self, utxo: Utxo) -> bool {contains45,1219
    pub fn owned_by(&self, pk: &PublicKey) -> Vec<Utxo> {owned_by49,1318
    pub fn process(&mut self, transaction: &Transaction) {process57,1571
    pub fn undo(&mut self, transaction: &Transaction, blockchain: &Blockchain, block: &Block) {undo69,2109
    pub fn verify(&self, transaction: &Transaction) -> Result<(), TransactionError> {verify90,3053
    pub fn validate(&self, block: &Block) -> Result<(), BlockError> {validate114,4003
    pub fn process_all(&mut self, transactions: &[Transaction]) {process_all124,4321
    pub fn undo_all(undo_all130,4485
    pub fn size(&self) -> usize {size141,4741
    pub fn initial_utxos(&self) -> &HashMap<UtxoId, UtxoData> {initial_utxos145,4807
impl Eq for UtxoPool {}UtxoPool150,4908
impl PartialEq for UtxoPool {UtxoPool152,4933
    fn eq(&self, other: &Self) -> bool {eq153,4963
impl fmt::Display for UtxoPool {UtxoPool160,5248
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt161,5281

utxo/mod.rs,729
pub struct Utxo {Utxo10,164
impl Utxo {Utxo15,221
    pub fn new(id: UtxoId, data: UtxoData) -> Self {new16,233
    pub fn id(&self) -> &UtxoId {id20,319
    pub fn data(&self) -> &UtxoData {data24,377
    pub fn txid(&self) -> Hash {txid29,491
    pub fn vout(&self) -> usize {vout33,554
    pub fn amount(&self) -> u32 {amount37,618
    pub fn public_key(&self) -> &PublicKey {public_key41,686
impl Eq for Utxo {}Utxo46,772
impl PartialEq for Utxo {Utxo48,793
    fn eq(&self, other: &Self) -> bool {eq49,819
// impl fmt::Display for Utxo {Utxo54,897
//     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {fmt55,929
pub mod data;data67,1281
pub mod id;id68,1295
pub mod pool;pool69,1307
